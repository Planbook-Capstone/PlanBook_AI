"""
Celery tasks cho JSON Template Processing
X·ª≠ l√Ω JSON template b·∫•t ƒë·ªìng b·ªô v·ªõi progress tracking
"""

import logging
import asyncio
from typing import Dict, Any
from datetime import datetime

from app.core.celery_app import celery_app
from app.services.mongodb_task_service import get_mongodb_task_service
from app.services.json_template_service import get_json_template_service
from app.services.kafka_service import kafka_service, safe_kafka_call
from app.constants.kafka_message_types import PROGRESS_TYPE, RESULT_TYPE

logger = logging.getLogger(__name__)


@celery_app.task(bind=True, name="app.tasks.slide_generation_tasks.process_json_template_task")
def process_json_template_task(self, task_id: str, lesson_id: str, template_json: Dict[str, Any], config_prompt: str = None, user_id: str = None, book_id: str = None):
    """
    Celery task ƒë·ªÉ x·ª≠ l√Ω JSON template b·∫•t ƒë·ªìng b·ªô v·ªõi progress tracking

    Args:
        task_id: ID c·ªßa task trong MongoDB
        lesson_id: ID c·ªßa b√†i h·ªçc
        template_json: JSON template ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch s·∫µn
        config_prompt: Prompt c·∫•u h√¨nh t√πy ch·ªânh (optional)
        user_id: ID c·ªßa user (optional, for Kafka notifications)
        book_id: ID c·ªßa s√°ch gi√°o khoa (optional)
    """

    logger.info(f"üöÄ CELERY TASK STARTED: process_json_template_task")
    logger.info(f"   Task ID: {task_id}")
    logger.info(f"   Lesson ID: {lesson_id}")
    logger.info(f"   Slides count: {len(template_json.get('slides', []))}")
    logger.info(f"   Config Prompt: {config_prompt}")

    async def _async_process_json_template():
        """Async wrapper cho JSON template processing"""
        logger.info(f"üîÑ ASYNC FUNCTION STARTED for task: {task_id}")

        try:
            logger.info("üîÑ Getting MongoDB task service...")
            task_service = get_mongodb_task_service()
            logger.info("‚úÖ MongoDB task service obtained")
        except Exception as e:
            logger.error(f"‚ùå Failed to get MongoDB task service: {e}")
            raise

        try:
            logger.info("üîÑ Getting JSON template service...")
            json_service = get_json_template_service()

            if not json_service.is_available():
                raise Exception("JSON template service not available")

            logger.info("‚úÖ JSON template service obtained and available")

            # X·ª≠ l√Ω JSON template v·ªõi progress tracking
            result = await json_service.process_json_template_with_progress(
                lesson_id=lesson_id,
                template_json=template_json,
                config_prompt=config_prompt,
                task_id=task_id,
                task_service=task_service,
                user_id=user_id,
                book_id=book_id
            )

            if result["success"]:
                # Ho√†n th√†nh th√†nh c√¥ng
                final_result = {
                    "success": True,
                    "output": result.get("processed_template", {}),
                    "created_at": datetime.now().isoformat()
                }

                await task_service.mark_task_completed(task_id, result=final_result)

                # Send final Kafka notification
                if user_id:
                    safe_kafka_call(
                        kafka_service.send_final_result_sync,
                        task_id=task_id,
                        user_id=user_id,
                        result=final_result,
                        tool_log_id=None
                    )

                logger.info(f"‚úÖ Task {task_id} ho√†n th√†nh th√†nh c√¥ng")

            else:
                # X·ª≠ l√Ω l·ªói
                error_message = result.get("error", "Unknown error")
                error_result = {
                    "success": False,
                    "error": f"L·ªói x·ª≠ l√Ω JSON template: {error_message}",
                    "output": {
                        "task_id": task_id,
                        "error_details": {
                            "error_message": error_message,
                            "task_stage": "json_template_processing"
                        }
                    }
                }

                await task_service.mark_task_failed(task_id, error=f"L·ªói x·ª≠ l√Ω JSON template: {error_message}")

                # Send Kafka error notification
                if user_id:
                    safe_kafka_call(
                        kafka_service.send_final_result_sync,
                        task_id=task_id,
                        user_id=user_id,
                        result=error_result,
                        tool_log_id=None
                    )

                logger.error(f"‚ùå Task {task_id} th·∫•t b·∫°i: {error_message}")

        except Exception as e:
            logger.error(f"‚ùå L·ªói kh√¥ng mong mu·ªën trong task {task_id}: {e}")

            # Create error result
            error_result = {
                "success": False,
                "error": f"L·ªói h·ªá th·ªëng: {str(e)}",
                "output": {
                    "task_id": task_id,
                    "error_details": {
                        "error_message": str(e),
                        "task_stage": "json_template_system_error"
                    }
                }
            }

            try:
                await task_service.mark_task_failed(
                    task_id,
                    error=f"L·ªói h·ªá th·ªëng: {str(e)}"
                )

                # Send Kafka error notification
                if user_id:
                    safe_kafka_call(
                        kafka_service.send_final_result_sync,
                        task_id=task_id,
                        user_id=user_id,
                        result=error_result,
                        tool_log_id=None
                    )

            except Exception as update_error:
                logger.error(f"‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i task: {update_error}")

    # Ch·∫°y async function
    logger.info(f"üîÑ Starting Celery task execution for task_id: {task_id}")

    try:
        logger.info("üîÑ Running async JSON template processing function...")
        asyncio.run(_async_process_json_template())
        logger.info(f"‚úÖ Celery task completed successfully for task_id: {task_id}")

    except Exception as e:
        logger.error(f"‚ùå L·ªói ch·∫°y async task {task_id}: {e}")
        logger.error(f"‚ùå Exception type: {type(e).__name__}")
        logger.error(f"‚ùå Exception details: {str(e)}")

        # Fallback: c·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói tr·ª±c ti·∫øp
        try:
            logger.info("üîÑ Attempting to update task status to FAILURE...")
            task_service = get_mongodb_task_service()

            # Create a new event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(task_service.mark_task_failed(
                    task_id,
                    error=f"L·ªói h·ªá th·ªëng: {str(e)}"
                ))
                logger.info("‚úÖ Task status updated to FAILURE")
            finally:
                loop.close()
        except Exception as update_error:
            logger.error(f"‚ùå Failed to update task status: {update_error}")

    return {
        "success": True,
        "task_id": task_id,
        "message": "JSON template processing completed"
    }


# Helper functions
async def trigger_json_template_task(
    lesson_id: str,
    template_json: Dict[str, Any],
    config_prompt: str = None,
    user_id: str = None,
    book_id: str = None
) -> str:
    """
    Trigger Celery task cho JSON template processing v√† t·∫°o task trong MongoDB

    Args:
        lesson_id: ID c·ªßa b√†i h·ªçc
        template_json: JSON template ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch s·∫µn
        config_prompt: Prompt c·∫•u h√¨nh t√πy ch·ªânh (optional)
        user_id: ID c·ªßa user (optional)
        book_id: ID c·ªßa s√°ch gi√°o khoa (optional)

    Returns:
        str: Task ID ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh
    """
    try:
        # Import TaskType enum
        from app.services.mongodb_task_service import TaskType

        # T·∫°o task trong MongoDB tr∆∞·ªõc
        task_service = get_mongodb_task_service()
        task_data = {
            "lesson_id": lesson_id,
            "template_json": template_json,
            "config_prompt": config_prompt,
            "user_id": user_id,
            "book_id": book_id
        }

        metadata = {
            "lesson_id": lesson_id,
            "slides_count": len(template_json.get("slides", [])),
            "config_prompt": config_prompt,
            "user_id": user_id,
            "book_id": book_id
        }

        task_id = await task_service.create_task(
            task_type=TaskType.JSON_TEMPLATE_PROCESSING,
            task_data=task_data,
            metadata=metadata
        )

        logger.info(f"‚úÖ Created MongoDB task: {task_id}")

        # Trigger Celery task
        celery_task = process_json_template_task.delay(
            task_id=task_id,
            lesson_id=lesson_id,
            template_json=template_json,
            config_prompt=config_prompt,
            user_id=user_id,
            book_id=book_id
        )

        logger.info(f"‚úÖ Triggered Celery task: {celery_task.id}")
        logger.info(f"üìã Task mapping: MongoDB={task_id}, Celery={celery_task.id}")

        return task_id

    except Exception as e:
        logger.error(f"‚ùå Error triggering JSON template task: {e}")
        raise


async def get_json_template_task_status(task_id: str) -> Dict[str, Any]:
    """
    L·∫•y tr·∫°ng th√°i c·ªßa JSON template processing task

    Args:
        task_id: ID c·ªßa task trong MongoDB

    Returns:
        Dict ch·ª©a th√¥ng tin tr·∫°ng th√°i task
    """
    try:
        task_service = get_mongodb_task_service()
        task_info = await task_service.get_task_status(task_id)

        if not task_info:
            return {
                "success": False,
                "error": "Task not found",
                "task_id": task_id
            }

        return {
            "success": True,
            "task_id": task_id,
            "status": task_info.get("status", "UNKNOWN"),
            "progress": task_info.get("progress", 0),
            "message": task_info.get("message", ""),
            "result": task_info.get("result"),
            "error": task_info.get("error"),
            "created_at": task_info.get("created_at"),
            "updated_at": task_info.get("updated_at")
        }

    except Exception as e:
        logger.error(f"‚ùå Error getting task status: {e}")
        return {
            "success": False,
            "error": str(e),
            "task_id": task_id
        }
