"""
Celery tasks cho Slide Generation
X·ª≠ l√Ω t·∫°o slide t·ª± ƒë·ªông b·∫•t ƒë·ªìng b·ªô v·ªõi progress tracking
"""

import logging
import asyncio
from typing import Dict, Any
from datetime import datetime

from app.core.celery_app import celery_app
from app.services.mongodb_task_service import get_mongodb_task_service
from app.services.slide_generation_service import get_slide_generation_service

logger = logging.getLogger(__name__)


@celery_app.task(name="app.tasks.slide_generation_tasks.test_task")
def test_slide_generation_task(message: str = "Test slide generation task"):
    """Simple test task ƒë·ªÉ ki·ªÉm tra Celery worker"""
    logger.info(f"üß™ TEST TASK EXECUTED: {message}")
    return {
        "success": True,
        "message": message,
        "timestamp": datetime.now().isoformat()
    }


@celery_app.task(bind=True, name="app.tasks.slide_generation_tasks.generate_slides_task")
def generate_slides_task(self, task_id: str, lesson_id: str, template_id: str,
                        config_prompt: str = None, presentation_title: str = None):
    """
    Celery task ƒë·ªÉ t·∫°o slide t·ª± ƒë·ªông b·∫•t ƒë·ªìng b·ªô

    Args:
        task_id: ID c·ªßa task trong MongoDB
        lesson_id: ID c·ªßa b√†i h·ªçc
        template_id: ID c·ªßa Google Slides template
        config_prompt: Prompt c·∫•u h√¨nh t√πy ch·ªânh (optional)
        presentation_title: Ti√™u ƒë·ªÅ presentation t√πy ch·ªânh (optional)
    """

    logger.info(f"üöÄ CELERY TASK STARTED: generate_slides_task")
    logger.info(f"   Task ID: {task_id}")
    logger.info(f"   Lesson ID: {lesson_id}")
    logger.info(f"   Template ID: {template_id}")
    logger.info(f"   Config Prompt: {config_prompt}")
    logger.info(f"   Presentation Title: {presentation_title}")
    
    async def _async_generate_slides():
        """Async wrapper cho slide generation"""
        logger.info(f"üîÑ ASYNC FUNCTION STARTED for task: {task_id}")

        try:
            logger.info("üîÑ Getting MongoDB task service...")
            task_service = get_mongodb_task_service()
            logger.info("‚úÖ MongoDB task service obtained")
        except Exception as e:
            logger.error(f"‚ùå Failed to get MongoDB task service: {e}")
            raise

        try:
            logger.info(f"üöÄ B·∫Øt ƒë·∫ßu task t·∫°o slide: {task_id}")
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω
            await task_service.mark_task_processing(task_id)
            await task_service.update_task_progress(
                task_id,
                progress=10,
                message="ƒêang kh·ªüi t·∫°o d·ªãch v·ª• t·∫°o slide..."
            )
            
            # L·∫•y slide generation service
            slide_service = get_slide_generation_service()
            
            if not slide_service.is_available():
                await task_service.mark_task_failed(
                    task_id,
                    error="D·ªãch v·ª• t·∫°o slide kh√¥ng kh·∫£ d·ª•ng"
                )
                return
            
            # C·∫≠p nh·∫≠t: ƒêang l·∫•y n·ªôi dung b√†i h·ªçc
            await task_service.update_task_progress(
                task_id,
                progress=20,
                message="üìñ ƒêang l·∫•y n·ªôi dung b√†i h·ªçc..."
            )
            
            # C·∫≠p nh·∫≠t: ƒêang ph√¢n t√≠ch template
            await task_service.update_task_progress(
                task_id,
                progress=30,
                message="üîç ƒêang ph√¢n t√≠ch c·∫•u tr√∫c template Google Slides..."
            )
            
            # C·∫≠p nh·∫≠t: ƒêang sinh n·ªôi dung v·ªõi LLM
            await task_service.update_task_progress(
                task_id,
                progress=50,
                message="ü§ñ ƒêang s·ª≠ d·ª•ng AI ƒë·ªÉ sinh n·ªôi dung slide..."
            )
            
            # Th·ª±c hi·ªán slide generation
            result = await slide_service.generate_slides_from_lesson(
                lesson_id=lesson_id,
                template_id=template_id,
                config_prompt=config_prompt
            )
            
            if result["success"]:
                # C·∫≠p nh·∫≠t: ƒêang t·∫°o slides
                await task_service.update_task_progress(
                    task_id,
                    progress=80,
                    message="üìä ƒêang t·∫°o slides tr√™n Google Slides..."
                )

                # Ho√†n th√†nh th√†nh c√¥ng
                await task_service.mark_task_completed(
                    task_id,
                    result={
                        "success": True,
                        "lesson_id": result["lesson_id"],
                        "template_id": result["original_template_id"],
                        "presentation_id": result["presentation_id"],
                        "presentation_title": result["presentation_title"],
                        "web_view_link": result["web_view_link"],
                        "slides_created": result["slides_created"],
                        "template_info": result["template_info"],
                        "created_at": datetime.now().isoformat()
                    }
                )
                
                logger.info(f"‚úÖ Task {task_id} ho√†n th√†nh th√†nh c√¥ng")
                
            else:
                # X·ª≠ l√Ω l·ªói
                error_message = result.get("error", "Unknown error")
                await task_service.mark_task_failed(
                    task_id,
                    error=f"L·ªói t·∫°o slide: {error_message}"
                )
                
                logger.error(f"‚ùå Task {task_id} th·∫•t b·∫°i: {error_message}")
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói kh√¥ng mong mu·ªën trong task {task_id}: {e}")
            
            try:
                await task_service.mark_task_failed(
                    task_id,
                    error=f"L·ªói h·ªá th·ªëng: {str(e)}"
                )
            except Exception as update_error:
                logger.error(f"‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i task: {update_error}")
    
    # Ch·∫°y async function
    logger.info(f"üîÑ Starting Celery task execution for task_id: {task_id}")

    try:
        # S·ª≠ d·ª•ng asyncio.run() thay v√¨ event loop ph·ª©c t·∫°p
        logger.info("üîÑ Running async slide generation function...")
        asyncio.run(_async_generate_slides())
        logger.info(f"‚úÖ Celery task completed successfully for task_id: {task_id}")

    except Exception as e:
        logger.error(f"‚ùå L·ªói ch·∫°y async task {task_id}: {e}")
        logger.error(f"‚ùå Exception type: {type(e).__name__}")
        logger.error(f"‚ùå Exception details: {str(e)}")

        # Fallback: c·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói tr·ª±c ti·∫øp - s·ª≠ d·ª•ng new_event_loop
        try:
            logger.info("üîÑ Attempting to update task status to FAILURE...")
            task_service = get_mongodb_task_service()

            # Create a new event loop instead of using asyncio.run() again
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(task_service.mark_task_failed(
                    task_id,
                    error=f"L·ªói h·ªá th·ªëng: {str(e)}"
                ))
                logger.info("‚úÖ Task status updated to FAILURE")
            finally:
                loop.close()
        except Exception as update_error:
            logger.error(f"‚ùå Failed to update task status: {update_error}")


@celery_app.task(bind=True, name="app.tasks.slide_generation_tasks.cleanup_old_presentations")
def cleanup_old_presentations_task(self, days_old: int = 7):
    """
    Celery task ƒë·ªÉ d·ªçn d·∫πp c√°c presentation c≈© tr√™n Google Drive
    
    Args:
        days_old: S·ªë ng√†y ƒë·ªÉ xem presentation l√† "c≈©" (m·∫∑c ƒë·ªãnh 7 ng√†y)
    """
    
    async def _async_cleanup():
        """Async wrapper cho cleanup"""
        try:
            logger.info(f"üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp presentation c≈© h∆°n {days_old} ng√†y")
            
            slide_service = get_slide_generation_service()
            
            if not slide_service.is_available():
                logger.warning("Slide service kh√¥ng kh·∫£ d·ª•ng, b·ªè qua cleanup")
                return
            
            # TODO: Implement cleanup logic
            # 1. L·∫•y danh s√°ch presentations t·ª´ Google Drive
            # 2. Ki·ªÉm tra ng√†y t·∫°o
            # 3. X√≥a nh·ªØng file c≈© h∆°n days_old
            
            logger.info("‚úÖ Ho√†n th√†nh d·ªçn d·∫πp presentation")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh cleanup: {e}")
    
    # Ch·∫°y async function
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(_async_cleanup())
    except Exception as e:
        logger.error(f"‚ùå L·ªói ch·∫°y cleanup task: {e}")


# Utility function ƒë·ªÉ trigger task t·ª´ API
async def trigger_slide_generation_task(
    lesson_id: str, 
    template_id: str,
    config_prompt: str = None,
    presentation_title: str = None
) -> str:
    """
    Trigger slide generation task v√† tr·∫£ v·ªÅ task_id
    
    Args:
        lesson_id: ID c·ªßa b√†i h·ªçc
        template_id: ID c·ªßa template
        config_prompt: Prompt c·∫•u h√¨nh t√πy ch·ªânh
        presentation_title: Ti√™u ƒë·ªÅ presentation t√πy ch·ªânh
        
    Returns:
        str: Task ID ƒë·ªÉ theo d√µi progress
    """
    try:
        # T·∫°o task trong MongoDB
        task_service = get_mongodb_task_service()
        
        task_data = {
            "lesson_id": lesson_id,
            "template_id": template_id,
            "config_prompt": config_prompt,
            "presentation_title": presentation_title
        }

        from app.services.mongodb_task_service import TaskType

        task_id = await task_service.create_task(
            task_type=TaskType.SLIDE_GENERATION,
            task_data=task_data
        )
        
        # Trigger Celery task
        logger.info(f"üîÑ About to trigger Celery task for task_id: {task_id}")
        logger.info(f"   Lesson ID: {lesson_id}")
        logger.info(f"   Template ID: {template_id}")

        try:
            # Trigger Celery task v·ªõi apply_async v√† queue c·ª• th·ªÉ
            celery_result = generate_slides_task.apply_async(
                args=[task_id, lesson_id, template_id, config_prompt, presentation_title],
                queue='slide_generation_queue'
            )

            logger.info(f"‚úÖ Celery task triggered successfully:")
            logger.info(f"   Task ID: {task_id}")
            logger.info(f"   Celery Result ID: {celery_result.id}")
            logger.info(f"   Celery State: {celery_result.state}")

        except Exception as e:
            logger.error(f"‚ùå Failed to trigger Celery task: {e}")
            logger.error(f"   Exception type: {type(e).__name__}")
            logger.error(f"   Exception details: {str(e)}")
            raise

        logger.info(f"‚úÖ ƒê√£ trigger slide generation task: {task_id}")
        return task_id
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói trigger slide generation task: {e}")
        raise
