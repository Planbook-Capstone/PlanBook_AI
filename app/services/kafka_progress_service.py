"""
Kafka Progress Notification Service for PlanBook AI
Service ƒë·ªÉ g·ª≠i progress updates qua Kafka cho SpringBoot
"""
import logging
from typing import Optional, Dict, Any
from datetime import datetime

from app.services.kafka_service import kafka_service
from app.core.kafka_config import get_responses_topic

logger = logging.getLogger(__name__)


class KafkaProgressService:
    """Service ƒë·ªÉ g·ª≠i progress updates qua Kafka"""
    
    def __init__(self):
        self.kafka_service = kafka_service
    
    async def send_progress_update(
        self,
        task_id: str,
        user_id: str,
        progress: int,
        message: str,
        status: str = "processing",
        additional_data: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        G·ª≠i progress update qua Kafka cho SpringBoot
        
        Args:
            task_id: ID c·ªßa task
            user_id: ID c·ªßa user
            progress: Ph·∫ßn trƒÉm ho√†n th√†nh (0-100)
            message: Th√¥ng ƒëi·ªáp m√¥ t·∫£ tr·∫°ng th√°i
            status: Tr·∫°ng th√°i task (processing, completed, failed)
            additional_data: D·ªØ li·ªáu b·ªï sung (optional)
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        try:
            # Chu·∫©n b·ªã message data v·ªõi routing information
            progress_data = {
                "task_id": task_id,
                "user_id": user_id,
                "progress": progress,
                "message": message,
                "status": status,
                "timestamp": datetime.now().isoformat()
            }
            
            # Th√™m d·ªØ li·ªáu b·ªï sung n·∫øu c√≥
            if additional_data:
                progress_data.update(additional_data)
            
            # T·∫°o Kafka message
            kafka_message = {
                "type": "lesson_plan_content_generation_progress",
                "data": progress_data
            }
            
            # G·ª≠i message qua Kafka responses topic v·ªõi user_id l√†m key
            # Kafka s·∫Ω route message ƒë·∫øn partition d·ª±a tr√™n user_id
            logger.info(f"üì§ Sending Kafka message - Topic: {get_responses_topic()}, Key: {user_id}, Type: {kafka_message['type']}")

            success = await self.kafka_service.send_message_async(
                message=kafka_message,
                topic=get_responses_topic(),
                key=user_id  # S·ª≠ d·ª•ng user_id l√†m key ƒë·ªÉ route message
            )

            if success:
                logger.info(f"‚úÖ Sent progress update via Kafka - Task: {task_id}, Progress: {progress}%, User: {user_id}, Status: {status}")
            else:
                logger.error(f"‚ùå Failed to send progress update via Kafka - Task: {task_id}")

            return success
            
        except Exception as e:
            logger.error(f"‚ùå Error sending progress update via Kafka: {e}")
            return False
    
    async def send_task_started(
        self,
        task_id: str,
        user_id: str,
        lesson_id: Optional[str] = None
    ) -> bool:
        """G·ª≠i th√¥ng b√°o task b·∫Øt ƒë·∫ßu"""
        additional_data = {}
        if lesson_id:
            additional_data["lesson_id"] = lesson_id
            
        return await self.send_progress_update(
            task_id=task_id,
            user_id=user_id,
            progress=5,
            message="T√°c v·ª• ƒë√£ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω",
            status="processing",
            additional_data=additional_data
        )
    
    async def send_task_completed(
        self,
        task_id: str,
        user_id: str,
        result: Dict[str, Any],
        lesson_id: Optional[str] = None
    ) -> bool:
        """G·ª≠i th√¥ng b√°o task ho√†n th√†nh"""
        logger.info(f"üì§ Sending task completion notification - Task: {task_id}, User: {user_id}, Success: {result.get('success', 'unknown')}")

        additional_data = {
            "result": result
        }
        if lesson_id:
            additional_data["lesson_id"] = lesson_id

        success = await self.send_progress_update(
            task_id=task_id,
            user_id=user_id,
            progress=100,
            message="T√°c v·ª• ƒë√£ ho√†n th√†nh th√†nh c√¥ng",
            status="completed",
            additional_data=additional_data
        )

        if success:
            logger.info(f"‚úÖ Task completion notification sent successfully for task {task_id}")
        else:
            logger.error(f"‚ùå Failed to send task completion notification for task {task_id}")

        return success
    
    async def send_task_failed(
        self,
        task_id: str,
        user_id: str,
        error: str,
        lesson_id: Optional[str] = None
    ) -> bool:
        """G·ª≠i th√¥ng b√°o task th·∫•t b·∫°i"""
        logger.info(f"üì§ Sending task failure notification - Task: {task_id}, User: {user_id}, Error: {error}")

        additional_data = {
            "error": error
        }
        if lesson_id:
            additional_data["lesson_id"] = lesson_id

        success = await self.send_progress_update(
            task_id=task_id,
            user_id=user_id,
            progress=0,
            message=f"T√°c v·ª• th·∫•t b·∫°i: {error}",
            status="failed",
            additional_data=additional_data
        )

        if success:
            logger.info(f"‚úÖ Task failure notification sent successfully for task {task_id}")
        else:
            logger.error(f"‚ùå Failed to send task failure notification for task {task_id}")

        return success

    async def send_final_result(
        self,
        task_id: str,
        user_id: str,
        result: Dict[str, Any],
        lesson_id: Optional[str] = None
    ) -> bool:
        """
        G·ª≠i k·∫øt qu·∫£ cu·ªëi c√πng c·ªßa task v·ªÅ SpringBoot
        B·∫•t k·ªÉ th√†nh c√¥ng hay th·∫•t b·∫°i ƒë·ªÅu g·ª≠i message
        """
        try:
            is_success = result.get("success", False)
            error_msg = result.get("error", "")

            logger.info(f"üì§ Sending final result - Task: {task_id}, User: {user_id}, Success: {is_success}")

            # T·∫°o message v·ªõi format chu·∫©n cho SpringBoot
            message_type = "lesson_plan_content_generation_result"

            progress_data = {
                "task_id": task_id,
                "user_id": user_id,
                "success": is_success,
                "result": result,
                "timestamp": datetime.now().isoformat()
            }

            if lesson_id:
                progress_data["lesson_id"] = lesson_id

            if not is_success and error_msg:
                progress_data["error"] = error_msg
                progress_data["message"] = f"T√°c v·ª• ho√†n th√†nh v·ªõi l·ªói: {error_msg}"
                progress_data["status"] = "completed_with_error"
            else:
                progress_data["message"] = "T√°c v·ª• ƒë√£ ho√†n th√†nh th√†nh c√¥ng"
                progress_data["status"] = "completed"

            # T·∫°o Kafka message
            kafka_message = {
                "type": message_type,
                "data": progress_data
            }

            # G·ª≠i message qua Kafka responses topic
            logger.info(f"üì§ Sending final result Kafka message - Topic: {get_responses_topic()}, Key: {user_id}")

            success = await self.kafka_service.send_message_async(
                message=kafka_message,
                topic=get_responses_topic(),
                key=user_id
            )

            if success:
                logger.info(f"‚úÖ Final result sent successfully for task {task_id}")
            else:
                logger.error(f"‚ùå Failed to send final result for task {task_id}")

            return success

        except Exception as e:
            logger.error(f"‚ùå Error sending final result for task {task_id}: {e}")
            return False


class SyncKafkaProgressService:
    """
    Sync wrapper cho KafkaProgressService ƒë·ªÉ s·ª≠ d·ª•ng trong Celery tasks
    """

    def __init__(self):
        from app.services.kafka_service import kafka_service
        self.kafka_service = kafka_service

    def send_progress_update_sync(
        self,
        tool_log_id: str,
        task_id: str,
        user_id: str,
        progress: int,
        message: str,
        status: str = "processing",
        additional_data: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        G·ª≠i progress update qua Kafka (sync version cho Celery)
        V·ªõi fallback mechanism ƒë·ªÉ kh√¥ng block task processing
        """
        try:
            # Chu·∫©n b·ªã message data
            progress_data = {
                "tool_log_id": tool_log_id,
                "task_id": task_id,
                "user_id": user_id,
                "progress": progress,
                "message": message,
                "status": status,
                "timestamp": datetime.now().isoformat()
            }

            # Th√™m d·ªØ li·ªáu b·ªï sung n·∫øu c√≥
            if additional_data:
                progress_data.update(additional_data)

            # T·∫°o Kafka message
            kafka_message = {
                "type": "lesson_plan_content_generation_progress",
                "data": progress_data
            }

            # G·ª≠i message qua sync Kafka producer
            logger.info(f"üì§ [SYNC] Sending Kafka message - Topic: {get_responses_topic()}, Key: {user_id}, Type: {kafka_message['type']}")

            success = self.kafka_service.send_message_sync(
                message=kafka_message,
                topic=get_responses_topic(),
                key=user_id
            )

            if success:
                logger.info(f"‚úÖ [SYNC] Sent progress update - Task: {task_id}, Progress: {progress}%, User: {user_id}, Status: {status}")
            else:
                logger.warning(f"‚ö†Ô∏è [SYNC] Failed to send progress update - Task: {task_id}, but continuing processing...")

            # Always return True to not block task processing
            # Even if Kafka fails, the task should continue
            return True

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [SYNC] Error sending progress update: {e}, but continuing processing...")
            # Don't let Kafka errors block the main task processing
            return True

    def send_task_started_sync(
        self,
        task_id: str,
        user_id: str,
        lesson_id: Optional[str] = None,
        tool_log_id: Optional[str] = None
    ) -> bool:
        """G·ª≠i th√¥ng b√°o task b·∫Øt ƒë·∫ßu (sync)"""
        additional_data = {}
        if lesson_id:
            additional_data["lesson_id"] = lesson_id

        return self.send_progress_update_sync(
            tool_log_id=tool_log_id or "",
            task_id=task_id,
            user_id=user_id,
            progress=5,
            message="T√°c v·ª• ƒë√£ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω",
            status="processing",
            additional_data=additional_data
        )

    def send_task_completed_sync(
        self,
        task_id: str,
        user_id: str,
        result: Dict[str, Any],
        lesson_id: Optional[str] = None,
        tool_log_id: Optional[str] = None
    ) -> bool:
        """G·ª≠i th√¥ng b√°o task ho√†n th√†nh (sync)"""
        logger.info(f"üì§ [SYNC] Sending task completion notification - Task: {task_id}, User: {user_id}, Success: {result.get('success', 'unknown')}")

        additional_data = {
            "result": result
        }
        if lesson_id:
            additional_data["lesson_id"] = lesson_id

        success = self.send_progress_update_sync(
            tool_log_id=tool_log_id or "",
            task_id=task_id,
            user_id=user_id,
            progress=100,
            message="T√°c v·ª• ƒë√£ ho√†n th√†nh th√†nh c√¥ng",
            status="completed",
            additional_data=additional_data
        )

        if success:
            logger.info(f"‚úÖ [SYNC] Task completion notification sent successfully for task {task_id}")
        else:
            logger.error(f"‚ùå [SYNC] Failed to send task completion notification for task {task_id}")

        return success

    def send_task_failed_sync(
        self,
        task_id: str,
        user_id: str,
        error: str,
        lesson_id: Optional[str] = None,
        tool_log_id: Optional[str] = None
    ) -> bool:
        """G·ª≠i th√¥ng b√°o task th·∫•t b·∫°i (sync)"""
        logger.info(f"üì§ [SYNC] Sending task failure notification - Task: {task_id}, User: {user_id}, Error: {error}")

        additional_data = {
            "error": error
        }
        if lesson_id:
            additional_data["lesson_id"] = lesson_id

        success = self.send_progress_update_sync(
            tool_log_id=tool_log_id or "",
            task_id=task_id,
            user_id=user_id,
            progress=0,
            message=f"T√°c v·ª• th·∫•t b·∫°i: {error}",
            status="failed",
            additional_data=additional_data
        )

        if success:
            logger.info(f"‚úÖ [SYNC] Task failure notification sent successfully for task {task_id}")
        else:
            logger.error(f"‚ùå [SYNC] Failed to send task failure notification for task {task_id}")

        return success

    def send_final_result_sync(
        self,
        task_id: str,
        user_id: str,
        result: Dict[str, Any],
        lesson_id: Optional[str] = None,
        tool_log_id:Optional[Any] = None
    ) -> bool:
        """
        G·ª≠i k·∫øt qu·∫£ cu·ªëi c√πng c·ªßa task v·ªÅ SpringBoot (sync version)
        V·ªõi fallback mechanism ƒë·ªÉ kh√¥ng block task completion
        """
        try:
            is_success = result.get("success", False)
            error_msg = result.get("error", "")

            logger.info(f"üì§ [SYNC] Sending final result - Task: {task_id}, User: {user_id}, Success: {is_success}")

            # T·∫°o message v·ªõi format chu·∫©n cho SpringBoot
            message_type = "lesson_plan_content_generation_result"

            progress_data = {
                "tool_log_id": tool_log_id,
                "task_id": task_id,
                "user_id": user_id,
                "success": is_success,
                "result": result,
                "timestamp": datetime.now().isoformat()
            }

            if lesson_id:
                progress_data["lesson_id"] = lesson_id

            if not is_success and error_msg:
                progress_data["error"] = error_msg
                progress_data["message"] = f"T√°c v·ª• ho√†n th√†nh v·ªõi l·ªói: {error_msg}"
                progress_data["status"] = "completed_with_error"
            else:
                progress_data["message"] = "T√°c v·ª• ƒë√£ ho√†n th√†nh th√†nh c√¥ng"
                progress_data["status"] = "completed"

            # T·∫°o Kafka message
            kafka_message = {
                "type": message_type,
                "data": progress_data
            }

            # G·ª≠i message qua sync Kafka producer
            logger.info(f"üì§ [SYNC] Sending final result Kafka message - Topic: {get_responses_topic()}, Key: {user_id}")

            success = self.kafka_service.send_message_sync(
                message=kafka_message,
                topic=get_responses_topic(),
                key=user_id
            )

            if success:
                logger.info(f"‚úÖ [SYNC] Final result sent successfully for task {task_id}")
            else:
                logger.warning(f"‚ö†Ô∏è [SYNC] Failed to send final result for task {task_id}, but task completed")

            # Always return True to not block task completion
            # Even if Kafka fails, the task itself completed successfully
            return True

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [SYNC] Error sending final result for task {task_id}: {e}, but task completed")
            # Don't let Kafka errors affect task completion status
            return True


# Global instances
kafka_progress_service = KafkaProgressService()
sync_kafka_progress_service = SyncKafkaProgressService()
