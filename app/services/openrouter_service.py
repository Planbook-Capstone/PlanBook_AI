"""
OpenRouter Service ƒë·ªÉ g·ªçi LLM th√¥ng qua OpenRouter API
"""
import logging
import json
import requests
import threading
import time
from typing import Dict, Any, Optional, List
from app.core.config import settings

logger = logging.getLogger(__name__)

class OpenRouterService:
    """
    Service s·ª≠ d·ª•ng OpenRouter API ƒë·ªÉ g·ªçi c√°c LLM models
    """

    def __init__(self):
        """Initialize OpenRouter service"""
        # Ch·ªâ set flag, kh√¥ng kh·ªüi t·∫°o service ngay
        self.api_key = None
        self.base_url = None
        self.model = None
        self.site_url = None
        self.site_name = None
        self.available = False
        self._service_initialized = False

    def _ensure_service_initialized(self):
        """Ensure OpenRouter service is initialized"""
        if not self._service_initialized:
            logger.info("üîÑ OpenRouterService: First-time initialization triggered")
            self._init_service()
            self._service_initialized = True
            logger.info("‚úÖ OpenRouterService: Initialization completed")

    def _init_service(self):
        """Initialize OpenRouter service"""
        self.api_key = settings.OPENROUTER_API_KEY
        self.base_url = settings.OPENROUTER_BASE_URL
        self.model = settings.OPENROUTER_MODEL
        self.site_url = settings.OPENROUTER_SITE_URL
        self.site_name = settings.OPENROUTER_SITE_NAME
        self.available = self._check_availability()
    
    def _check_availability(self) -> bool:
        """Ki·ªÉm tra xem OpenRouter service c√≥ s·∫µn kh√¥ng"""
        if not self.api_key:
            logger.warning("OPENROUTER_API_KEY not set. OpenRouter features will be disabled.")
            return False
        return True
    
    def _get_headers(self) -> Dict[str, str]:
        """T·∫°o headers cho OpenRouter API request"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        if self.site_url:
            headers["HTTP-Referer"] = self.site_url
        
        if self.site_name:
            headers["X-Title"] = self.site_name
            
        return headers
    
    async def generate_content(self, prompt: str, temperature: float = 0.1, max_tokens: int = 4096) -> Dict[str, Any]:
        """
        G·ªçi OpenRouter API ƒë·ªÉ generate content

        Args:
            prompt: Text prompt ƒë·ªÉ g·ª≠i t·ªõi model
            temperature: Temperature cho response (0.0 - 1.0)
            max_tokens: S·ªë token t·ªëi ƒëa cho response

        Returns:
            Dict ch·ª©a response t·ª´ OpenRouter API
        """
        self._ensure_service_initialized()
        start_time = time.time()

        try:
            if not self.available:
                return {
                    "success": False,
                    "error": "OpenRouter service not available. Please set OPENROUTER_API_KEY.",
                    "text": ""
                }

            # Prepare request data
            data = {
                "model": self.model,
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": temperature,
                "max_tokens": max_tokens
            }

            # Log request details
            logger.info("=" * 80)
            logger.info("üöÄ OPENROUTER LLM REQUEST")
            logger.info("=" * 80)
            logger.info(f"üìç URL: {self.base_url}/chat/completions")
            logger.info(f"ü§ñ Model: {self.model}")
            logger.info(f"üå°Ô∏è Temperature: {temperature}")
            logger.info(f"üìè Max Tokens: {max_tokens}")
            logger.info(f"üìù Prompt Length: {len(prompt)} characters")
            logger.info("üìã Request Headers:")
            headers = self._get_headers()
            for key, value in headers.items():
                if key == "Authorization":
                    logger.info(f"   {key}: Bearer ***{value[-10:]}")  # Ch·ªâ hi·ªán 10 k√Ω t·ª± cu·ªëi c·ªßa API key
                else:
                    logger.info(f"   {key}: {value}")

            logger.info("üìÑ Request Payload:")
            logger.info(f"   Prompt (truncated): {prompt}...")

            # Make API request
            logger.info("‚è≥ Sending request to OpenRouter API...")

            response = requests.post(
                url=f"{self.base_url}/chat/completions",
                headers=headers,
                data=json.dumps(data),
                timeout=60
            )
            
            # Calculate response time
            end_time = time.time()
            response_time = end_time - start_time

            # Log response details
            logger.info("=" * 80)
            logger.info("üì• OPENROUTER LLM RESPONSE")
            logger.info("=" * 80)
            logger.info(f"‚è±Ô∏è Response Time: {response_time:.2f} seconds")
            logger.info(f"üìä Status Code: {response.status_code}")

            if response.status_code == 200:
                response_data = response.json()

                # Log full response data
                logger.info("üìÑ Full Response Data:")
                logger.info(json.dumps(response_data, ensure_ascii=False, indent=2))

                if "choices" in response_data and len(response_data["choices"]) > 0:
                    content = response_data["choices"][0]["message"]["content"]

                    # Log extracted content
                    logger.info("‚úÖ SUCCESS - Content extracted:")
                    if len(content) > 1000:
                        logger.info(f"üìù Content (truncated): {content[:1000]}...")
                    else:
                        logger.info(f"üìù Content: {content}")

                    # Log usage statistics if available
                    if "usage" in response_data:
                        usage = response_data["usage"]
                        logger.info("üìà Token Usage:")
                        logger.info(f"   Prompt Tokens: {usage.get('prompt_tokens', 'N/A')}")
                        logger.info(f"   Completion Tokens: {usage.get('completion_tokens', 'N/A')}")
                        logger.info(f"   Total Tokens: {usage.get('total_tokens', 'N/A')}")

                    logger.info("=" * 80)

                    return {
                        "success": True,
                        "text": content,
                        "error": None,
                        "usage": response_data.get("usage", {}),
                        "response_time": response_time
                    }
                else:
                    error_msg = "No content in OpenRouter response"
                    logger.error(f"‚ùå ERROR: {error_msg}")
                    logger.error(f"üìÑ Response Data: {json.dumps(response_data, ensure_ascii=False, indent=2)}")
                    logger.info("=" * 80)
                    return {
                        "success": False,
                        "error": error_msg,
                        "text": "",
                        "response_time": response_time
                    }
            else:
                error_msg = f"OpenRouter API error: {response.status_code} - {response.text}"
                logger.error(f"‚ùå HTTP ERROR: {error_msg}")
                logger.error(f"üìÑ Error Response: {response.text}")
                logger.info("=" * 80)
                return {
                    "success": False,
                    "error": error_msg,
                    "text": "",
                    "response_time": response_time
                }
                
        except requests.exceptions.Timeout:
            end_time = time.time()
            response_time = end_time - start_time
            error_msg = "OpenRouter API request timeout"
            logger.error("=" * 80)
            logger.error("‚è∞ TIMEOUT ERROR")
            logger.error("=" * 80)
            logger.error(f"‚ùå Error: {error_msg}")
            logger.error(f"‚è±Ô∏è Time elapsed: {response_time:.2f} seconds")
            logger.error("=" * 80)
            return {
                "success": False,
                "error": error_msg,
                "text": "",
                "response_time": response_time
            }
        except requests.exceptions.RequestException as e:
            end_time = time.time()
            response_time = end_time - start_time
            error_msg = f"OpenRouter API request failed: {str(e)}"
            logger.error("=" * 80)
            logger.error("üåê REQUEST ERROR")
            logger.error("=" * 80)
            logger.error(f"‚ùå Error: {error_msg}")
            logger.error(f"‚è±Ô∏è Time elapsed: {response_time:.2f} seconds")
            logger.error(f"üîç Exception type: {type(e).__name__}")
            logger.error("=" * 80)
            return {
                "success": False,
                "error": error_msg,
                "text": "",
                "response_time": response_time
            }
        except Exception as e:
            end_time = time.time()
            response_time = end_time - start_time
            error_msg = f"Unexpected error in OpenRouter service: {str(e)}"
            logger.error("=" * 80)
            logger.error("üí• UNEXPECTED ERROR")
            logger.error("=" * 80)
            logger.error(f"‚ùå Error: {error_msg}")
            logger.error(f"‚è±Ô∏è Time elapsed: {response_time:.2f} seconds")
            logger.error(f"üîç Exception type: {type(e).__name__}")
            logger.error("=" * 80)
            return {
                "success": False,
                "error": error_msg,
                "text": "",
                "response_time": response_time
            }
    
    def is_available(self) -> bool:
        """Ki·ªÉm tra xem service c√≥ s·∫µn kh√¥ng"""
        self._ensure_service_initialized()
        return self.available
    
    async def test_connection(self) -> Dict[str, Any]:
        """
        Test k·∫øt n·ªëi v·ªõi OpenRouter API

        Returns:
            Dict ch·ª©a k·∫øt qu·∫£ test
        """
        try:
            logger.info("üß™ Testing OpenRouter API connection...")
            test_prompt = "Vi·∫øt m·ªôt c√¢u ch√†o ƒë∆°n gi·∫£n b·∫±ng ti·∫øng Vi·ªát."
            result = await self.generate_content(test_prompt, temperature=0.1, max_tokens=100)

            if result["success"]:
                logger.info("‚úÖ OpenRouter API connection test successful!")
                return {
                    "success": True,
                    "message": "OpenRouter API connection successful",
                    "model": self.model,
                    "response_preview": result["text"][:100] + "..." if len(result["text"]) > 100 else result["text"],
                    "response_time": result.get("response_time", 0)
                }
            else:
                logger.error("‚ùå OpenRouter API connection test failed!")
                return {
                    "success": False,
                    "message": "OpenRouter API connection failed",
                    "error": result["error"]
                }

        except Exception as e:
            logger.error(f"üí• OpenRouter API test exception: {str(e)}")
            return {
                "success": False,
                "message": "OpenRouter API test failed",
                "error": str(e)
            }


# Factory function ƒë·ªÉ t·∫°o OpenRouterService instance
def get_openrouter_service() -> OpenRouterService:
    """
    T·∫°o OpenRouterService instance m·ªõi

    Returns:
        OpenRouterService: Fresh instance
    """
    return OpenRouterService()
