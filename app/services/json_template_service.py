"""
JSON Template Processing Service
X·ª≠ l√Ω slide generation v·ªõi JSON template t·ª´ frontend thay v√¨ Google Slides
"""

import logging
import re
import copy
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime

from app.services.llm_service import get_llm_service
from app.services.textbook_retrieval_service import get_textbook_retrieval_service

logger = logging.getLogger(__name__)


class JsonTemplateService:
    """Service x·ª≠ l√Ω JSON template t·ª´ frontend"""

    def __init__(self):
        self.llm_service = get_llm_service()
        self.textbook_service = get_textbook_retrieval_service()

    def is_available(self) -> bool:
        """Ki·ªÉm tra service c√≥ s·∫µn s√†ng kh√¥ng"""
        return (
            self.llm_service and self.llm_service.is_available() and
            self.textbook_service is not None
        )


    async def process_json_template_with_progress(
        self,
        lesson_id: str,
        template_json: Dict[str, Any],
        config_prompt: Optional[str] = None,
        task_id: Optional[str] = None,
        task_service: Optional[Any] = None,
        user_id: Optional[str] = None,
        book_id: Optional[str] = None,
        tool_log_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω JSON template v·ªõi progress tracking cho Celery
        C·∫≠p nh·∫≠t progress theo t·ª´ng slide ho√†n th√†nh
        G·ª≠i Kafka notifications cho t·ª´ng slide ho√†n th√†nh n·∫øu c√≥ user_id
        """
        try:
            logger.info(f"üîÑ Starting JSON template processing with progress tracking")
            logger.info(f"   Lesson ID: {lesson_id}")
            logger.info(f"   Task ID: {task_id}")
            logger.info(f"   Slides count: {len(template_json.get('slides', []))}")

            # Validation
            if not lesson_id or not lesson_id.strip():
                raise ValueError("lesson_id is empty or missing")

            if not template_json or not isinstance(template_json, dict):
                raise ValueError("template_json is empty or invalid")

            if not template_json.get("slides") or len(template_json.get("slides", [])) == 0:
                raise ValueError("template_json has no slides")

            # B∆∞·ªõc 1: L·∫•y n·ªôi dung b√†i h·ªçc
            if task_service and task_id:
                await task_service.update_task_progress(
                    task_id,
                    progress=50,
                    message="üìö ƒêang l·∫•y n·ªôi dung b√†i h·ªçc..."
                )

            lesson_content = await self._get_lesson_content(lesson_id, book_id)
            if not lesson_content.get("success", False):
                error_msg = lesson_content.get("error", "Unknown error in lesson content")
                raise Exception(error_msg)

            content_text = lesson_content.get("content", "")
            if not content_text or not content_text.strip():
                raise ValueError("lesson content is empty")

            # B∆∞·ªõc 2: S·ª≠ d·ª•ng tr·ª±c ti·∫øp JSON ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch t·ª´ input
            analyzed_template = template_json

            if task_service and task_id:
                await task_service.update_task_progress(
                    task_id,
                    progress=60,
                    message="üîç ƒêang ph√¢n t√≠ch c·∫•u tr√∫c template..."
                )

            # Workflow t·ªëi ∆∞u h√≥a v·ªõi progress tracking
            result = await self._execute_optimized_workflow_with_progress(
                content_text,
                config_prompt,
                template_json,
                analyzed_template,
                task_id,
                task_service,
                user_id,
                tool_log_id
            )

            # Format n·ªôi dung cho frontend
            formatted_result = self._format_content_for_frontend(result)

            return {
                "success": True,
                "lesson_id": lesson_id,
                "processed_template": formatted_result,
                "slides_created": len(formatted_result.get("slides", []))
            }

        except Exception as e:
            logger.error(f"‚ùå Error processing JSON template with progress: {e}")
            return {
                "success": False,
                "error": f"Failed to process JSON template: {str(e)}",
                "lesson_id": lesson_id,
                "processed_template": {
                    "version": "1.0",
                    "createdAt": datetime.now().isoformat(),
                    "slideFormat": "16:9",
                    "slides": []
                },
                "slides_created": 0
            }

    async def _get_lesson_content(self, lesson_id: str, book_id: str = None) -> Dict[str, Any]:
        """L·∫•y n·ªôi dung b√†i h·ªçc t·ª´ TextbookRetrievalService"""
        try:
            logger.info(f"üìö Getting lesson content for: {lesson_id}, book_id: {book_id}")

            # S·ª≠ d·ª•ng TextbookRetrievalService ƒë·ªÉ l·∫•y lesson content
            lesson_result = await self.textbook_service.get_lesson_content(lesson_id, book_id)

            logger.info(f"üîç Lesson result keys: {list(lesson_result.keys())}")

            # Extract lesson content t·ª´ result
            lesson_content = lesson_result.get("lesson_content", "")

            if not lesson_content or not lesson_content.strip():
                logger.error(f"‚ùå No lesson content found for lesson_id: {lesson_id}")
                return {
                    "success": False,
                    "error": f"Empty lesson content for lesson_id: {lesson_id}"
                }

            logger.info(f"‚úÖ Retrieved lesson content: {len(lesson_content)} characters")
            logger.info(f"üìã Additional info - Book ID: {lesson_result.get('book_id')}, Total chunks: {lesson_result.get('total_chunks')}")

            return {
                "success": True,
                "content": lesson_content.strip(),
                "book_id": lesson_result.get("book_id"),
                "total_chunks": lesson_result.get("total_chunks"),
                "content_length": lesson_result.get("content_length")
            }

        except Exception as e:
            logger.error(f"‚ùå Error getting lesson content: {e}")
            return {
                "success": False,
                "error": f"Failed to get lesson content: {str(e)}"
            }

    def _format_content_for_frontend(self, template_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Format n·ªôi dung cho frontend - chuy·ªÉn \\n th√†nh xu·ªëng d√≤ng th·∫≠t v√† th√™m g·∫°ch ƒë·∫ßu d√≤ng
        """
        try:
            logger.info("üé® Formatting content for frontend...")

            # Deep copy ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng data g·ªëc
            formatted_data = copy.deepcopy(template_data)

            slides = formatted_data.get("slides", [])
            for slide in slides:
                elements = slide.get("elements", [])
                for element in elements:
                    text = element.get("text", "")
                    if text and isinstance(text, str):
                        # Format text ƒë·∫πp cho frontend
                        formatted_text = self._format_text_content(text)
                        element["text"] = formatted_text

                        # Log ƒë·ªÉ debug
                        if "\\n" in text or len(text.split('\n')) > 1:
                            logger.info(f"üé® Formatted text in element {element.get('id', 'unknown')}:")
                            logger.info(f"   Before: {text[:100]}...")
                            logger.info(f"   After: {formatted_text[:100]}...")

            logger.info(f"‚úÖ Content formatting complete for {len(slides)} slides")
            return formatted_data

        except Exception as e:
            logger.error(f"‚ùå Error formatting content for frontend: {e}")
            # Tr·∫£ v·ªÅ data g·ªëc n·∫øu format l·ªói
            return template_data

    def _format_text_content(self, text: str) -> str:
        """
        Format text content v·ªõi g·∫°ch ƒë·∫ßu d√≤ng cho T·∫§T C·∫¢ c√°c c√¢u
        """
        try:
            # Chuy·ªÉn \\n th√†nh xu·ªëng d√≤ng th·∫≠t
            formatted_text = text.replace("\\n", "\n")

            # Split th√†nh c√°c d√≤ng
            lines = formatted_text.split('\n')

            # N·∫øu ch·ªâ c√≥ 1 d√≤ng, th√™m g·∫°ch ƒë·∫ßu d√≤ng v√† tr·∫£ v·ªÅ
            if len(lines) <= 1:
                line = formatted_text.strip()
                if not line:
                    return ""
                # Ki·ªÉm tra xem ƒë√£ c√≥ g·∫°ch ƒë·∫ßu d√≤ng ch∆∞a
                if line.startswith('- ') or line.startswith('‚Ä¢ ') or line.startswith('* '):
                    return line
                else:
                    return f"- {line}"

            # Format t·ª´ng d√≤ng - TH√äM G·∫†CH ƒê·∫¶U D√íNG CHO T·∫§T C·∫¢
            formatted_lines = []
            for line in lines:
                line = line.strip()
                if not line:  # B·ªè qua d√≤ng tr·ªëng
                    continue

                # Ki·ªÉm tra xem d√≤ng ƒë√£ c√≥ g·∫°ch ƒë·∫ßu d√≤ng ch∆∞a
                if line.startswith('- ') or line.startswith('‚Ä¢ ') or line.startswith('* '):
                    formatted_lines.append(line)
                else:
                    # Th√™m g·∫°ch ƒë·∫ßu d√≤ng cho T·∫§T C·∫¢ c√°c d√≤ng
                    formatted_lines.append(f"- {line}")

            # Gh√©p l·∫°i v·ªõi xu·ªëng d√≤ng
            result = '\n'.join(formatted_lines)

            return result

        except Exception as e:
            logger.error(f"‚ùå Error formatting text content: {e}")
            # Tr·∫£ v·ªÅ text g·ªëc n·∫øu l·ªói
            return text.replace("\\n", "\n")

    async def _execute_optimized_workflow_with_progress(
        self,
        lesson_content: str,
        config_prompt: Optional[str],
        template_json: Dict[str, Any],
        analyzed_template: Dict[str, Any],
        task_id: Optional[str] = None,
        task_service: Optional[Any] = None,
        user_id: Optional[str] = None,
        tool_log_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Th·ª±c hi·ªán workflow t·ªëi ∆∞u h√≥a v·ªõi progress tracking
        C·∫≠p nh·∫≠t progress theo t·ª´ng slide ho√†n th√†nh
        G·ª≠i Kafka notifications cho t·ª´ng slide ho√†n th√†nh n·∫øu c√≥ user_id
        """
        try:
            logger.info("üöÄ Starting optimized workflow with progress tracking...")

            # B∆∞·ªõc 1: X√¢y d·ª±ng khung slide
            if task_service and task_id:
                await task_service.update_task_progress(
                    task_id,
                    progress=70,
                    message="üìã ƒêang t·∫°o khung slide..."
                )

            slide_framework = await self._generate_slide_framework(
                lesson_content,
                config_prompt
            )

            if not slide_framework.get("success", False):
                raise Exception(f"Step 1 failed: {slide_framework.get('error', 'Unknown error')}")

            framework_slides = slide_framework.get("slides", [])
            logger.info(f"‚úÖ Step 1 complete: Generated {len(framework_slides)} slide frameworks")

            # T·∫°o final template
            final_template = {
                "version": template_json.get("version", "1.0"),
                "createdAt": datetime.now().isoformat(),
                "slideFormat": template_json.get("slideFormat", "16:9"),
                "slides": []
            }

            # Content tracking kh√¥ng c√≤n c·∫ßn thi·∫øt v√¨ m·ªói slide s·ª≠ d·ª•ng data ri√™ng



            # Track used slides
            used_slide_ids = set()
            template_slides = analyzed_template.get("slides", [])

            total_slides = len(framework_slides)
            base_progress = 75  # B·∫Øt ƒë·∫ßu t·ª´ 75%
            progress_per_slide = 20 / total_slides if total_slides > 0 else 0  # 20% cho t·∫•t c·∫£ slides

            # X·ª≠ l√Ω t·ª´ng slide v·ªõi progress tracking
            for i, framework_slide in enumerate(framework_slides):
                slide_num = i + 1
                logger.info(f"üîÑ Processing slide {slide_num}/{total_slides}")

                # C·∫≠p nh·∫≠t progress cho slide hi·ªán t·∫°i
                current_progress = base_progress + (i * progress_per_slide)
                if task_service and task_id:
                    await task_service.update_task_progress(
                        task_id,
                        progress=int(current_progress),
                        message=f"ü§ñ ƒêang x·ª≠ l√Ω slide {slide_num}/{total_slides}..."
                    )

                # B∆∞·ªõc 2: Chi ti·∫øt h√≥a slide (b·ªè qua slide intro)
                if framework_slide.get("type") == "intro":
                    logger.info(f"‚è≠Ô∏è Skipping detailed processing for slide {slide_num} (intro slide type)")
                    # T·∫°o detailed_json cho slide intro t·ª´ framework_slide
                    intro_detailed_json = {
                        "slideId": framework_slide.get("slide_id", f"slide{slide_num}"),
                        "type": "intro",
                        "title": framework_slide.get("title", ""),
                        "description": framework_slide.get("description", ""),
                        "date": framework_slide.get("date", "")
                    }

                    detailed_slide = {
                        "success": True,
                        "content": framework_slide,
                        "detailed_json": intro_detailed_json
                    }
                else:
                    detailed_slide = await self._detail_slide_content(
                        framework_slide,
                        lesson_content,
                        config_prompt,
                        slide_num
                    )

                    if not detailed_slide.get("success", False):
                        logger.error(f"‚ùå Step 2 failed for slide {slide_num}: {detailed_slide.get('error', 'Unknown error')}")
                        continue
                    logger.info(f"======= Detailed slide {slide_num}: {detailed_slide.get('detailed_json', {})}")
                # B∆∞·ªõc 3: G·∫Øn placeholder
                detailed_json = detailed_slide.get("detailed_json")
                if detailed_json:
                    # Use JSON-based placeholder mapping
                    slide_with_placeholders = self._map_placeholders_from_json(
                        detailed_json,
                        slide_num
                    )
                else:
                    logger.error(f"‚ùå No detailed_json found for slide {slide_num}")
                    continue

                if not slide_with_placeholders.get("success", False):
                    logger.error(f"‚ùå Step 3 failed for slide {slide_num}: {slide_with_placeholders.get('error', 'Unknown error')}")
                    continue

                slide_data = slide_with_placeholders.get("slide_data", {})

                # B∆∞·ªõc 4: Map v√†o template
                mapped_slide = await self._map_single_slide_to_template(
                    slide_data,
                    template_slides,
                    used_slide_ids,
                    slide_num
                )

                if mapped_slide:
                    final_template["slides"].append(mapped_slide)
                    logger.info(f"‚úÖ Slide {slide_num} completed and added to result")

                    # C·∫≠p nh·∫≠t progress v√† result t·ª´ng ph·∫ßn sau khi ho√†n th√†nh slide
                    completed_progress = base_progress + ((i + 1) * progress_per_slide)
                    if task_service and task_id:
                        logger.info(f"üîÑ Updating partial result for slide {slide_num} - {len(final_template['slides'])} slides completed")

                        # T·∫°o partial result v·ªõi slides ƒë√£ ho√†n th√†nh
                        partial_result = {
                            "success": True,
                            "lesson_id": template_json.get("lesson_id", ""),
                            "processed_template": {
                                "version": final_template.get("version", "1.0"),
                                "createdAt": final_template.get("createdAt"),
                                "slideFormat": final_template.get("slideFormat", "16:9"),
                                "slides": final_template["slides"]  # Ch·ª©a t·∫•t c·∫£ slides ƒë√£ ho√†n th√†nh
                            },
                            "slides_created": len(final_template["slides"]),
                            "total_slides": total_slides,
                            "completed_slides": len(final_template["slides"])
                        }

                        logger.info(f"üîÑ Calling update_task_progress_with_result for task {task_id}")
                        await task_service.update_task_progress_with_result(
                            task_id,
                            progress=int(completed_progress),
                            message=f"‚úÖ ƒê√£ ho√†n th√†nh slide {slide_num}/{total_slides}",
                            partial_result=partial_result
                        )
                        logger.info(f"‚úÖ Successfully updated partial result for slide {slide_num}")

                        # Send Kafka notification for slide completion if user_id is available
                        if user_id:
                            from app.services.kafka_service import kafka_service
                            from app.services.kafka_service import safe_kafka_call

                            progress = int((slide_num / total_slides) * 100) if total_slides > 0 else 100
                            safe_kafka_call(
                                kafka_service.send_progress_update_sync,
                                tool_log_id=tool_log_id,
                                task_id=task_id,
                                user_id=user_id,
                                progress=progress,
                                message=f"‚úÖ ƒê√£ ho√†n th√†nh slide {slide_num}/{total_slides}",
                                status="processing",
                                additional_data={
                                    "slide_number": slide_num,
                                    "total_slides": total_slides,
                                    "completed_slides": partial_result.get("completed_slides", 0),
                                    "partial_result": partial_result
                                }
                            )
                else:
                    logger.error(f"‚ùå Failed to map slide {slide_num} to template")
                    continue

            # Ho√†n th√†nh - c·∫≠p nh·∫≠t final result
            if task_service and task_id:
                final_result = {
                    "success": True,
                    "lesson_id": template_json.get("lesson_id", ""),
                    "processed_template": final_template,
                    "slides_created": len(final_template.get("slides", [])),
                    "total_slides": total_slides,
                    "completed_slides": len(final_template.get("slides", []))
                }

                await task_service.update_task_progress_with_result(
                    task_id,
                    progress=95,
                    message=f"üéâ ƒê√£ t·∫°o th√†nh c√¥ng {len(final_template.get('slides', []))} slides",
                    partial_result=final_result
                )

            logger.info(f"üéâ Optimized workflow with progress complete: {len(final_template.get('slides', []))} slides created")
            return final_template

        except Exception as e:
            logger.error(f"‚ùå Error in optimized workflow with progress: {e}")
            raise

    async def _map_single_slide_to_template(
        self,
        slide_data: Dict[str, Any],
        template_slides: List[Dict[str, Any]],
        used_slide_ids: set,
        slide_number: int
    ) -> Dict[str, Any]:
        """
        Map m·ªôt slide ƒë∆°n l·∫ª v√†o template ngay l·∫≠p t·ª©c
        """
        try:
            logger.info(f"üîß Mapping slide {slide_number} to template...")

            # L·∫•y parsed data t·ª´ slide
            parsed_data = slide_data.get("parsed_data", {})
            placeholder_counts = slide_data.get("placeholder_counts", {})
            required_placeholders = list(placeholder_counts.keys())

            logger.info(f"üîç Slide {slide_number} requirements:")
            logger.info(f"   Required placeholders: {required_placeholders}")
            logger.info(f"   Required counts: {placeholder_counts}")

            # S·ª≠ d·ª•ng parsed_data ri√™ng c·ªßa slide n√†y thay v√¨ all_parsed_data chung
            # ƒë·ªÉ tr√°nh vi·ªác c√°c slide s·ª≠ d·ª•ng content c·ªßa nhau
            slide_parsed_data = parsed_data

            # T√¨m template ph√π h·ª£p v·ªõi exact matching requirements
            slide_description = slide_data.get("description", [])

            best_template = None
            try:
                best_template = self._find_best_matching_template_with_max_length(
                    slide_description,
                    template_slides,
                    used_slide_ids
                )
            except (ValueError, Exception) as e:
                # N·∫øu kh√¥ng t√¨m th·∫•y template ch∆∞a s·ª≠ d·ª•ng, th·ª≠ reuse template
                logger.info(f"üîÑ No unused exact template found for slide {slide_number}, trying to reuse...")
                logger.info(f"   Original error: {e}")
                try:
                    best_template = self._find_best_matching_template_with_max_length(
                        slide_description,
                        template_slides,
                        set()  # Allow reuse by passing empty used_slide_ids
                    )
                except (ValueError, Exception) as reuse_error:
                    logger.error(f"‚ùå No exact matching template found for slide {slide_number} (even with reuse)")
                    logger.error(f"   Reuse error: {reuse_error}")
                    return None

            # Ki·ªÉm tra best_template c√≥ h·ª£p l·ªá kh√¥ng
            if not best_template or not isinstance(best_template, dict):
                logger.error(f"‚ùå Invalid template returned for slide {slide_number}: {best_template}")
                return None

            template_id = best_template.get('id')
            if not template_id:
                logger.error(f"‚ùå Template missing 'id' field for slide {slide_number}: {best_template}")
                return None

            is_reused = template_id in used_slide_ids

            if is_reused:
                logger.info(f"‚úÖ Found exact matching template (REUSED): {template_id}")
            else:
                logger.info(f"‚úÖ Found exact matching template (NEW): {template_id}")

            # Get template requirements for max_length handling
            template_description = best_template.get("description", "")
            template_requirements = self._parse_template_description(template_description)

            # T·∫°o processed slide t·ª´ template v·ªõi parsed_data ri√™ng c·ªßa slide n√†y
            processed_slide = await self._create_processed_slide_from_template(
                best_template,
                slide_parsed_data,  # S·ª≠ d·ª•ng data ri√™ng c·ªßa slide n√†y
                slide_number,
                is_reused,
                template_requirements
            )

            if processed_slide:
                # Ch·ªâ th√™m v√†o used_slide_ids n·∫øu ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng
                if not is_reused:
                    used_slide_ids.add(template_id)
                logger.info(f"‚úÖ Successfully mapped slide {slide_number} ({'reused' if is_reused else 'new'})")
                return processed_slide
            else:
                logger.error(f"‚ùå Failed to create processed slide {slide_number}")
                return None

        except Exception as e:
            logger.error(f"‚ùå Error mapping slide {slide_number} to template: {e}")
            return None

    async def _generate_slide_framework(
        self,
        lesson_content: str,
        config_prompt: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        B∆∞·ªõc 1: X√¢y d·ª±ng khung slide t·ªïng qu√°t
        Input: lesson_content, default_prompt, config_prompt
        Output: Khung slide t·ªïng qu√°t (m·ªói slide th·ªÉ hi·ªán m·ªôt ch·ªß ƒë·ªÅ ch√≠nh, √Ω ƒë·ªãnh v√† ki·∫øn th·ª©c c·∫ßn truy·ªÅn ƒë·∫°t)
        """
        try:
            logger.info("üìã Generating slide framework...")

            # T·∫°o prompt cho vi·ªác x√¢y d·ª±ng khung slide
            framework_prompt = self._create_framework_prompt(lesson_content, config_prompt)

            # G·ªçi LLM ƒë·ªÉ t·∫°o khung slide
            llm_response = await self.llm_service.generate_content(
                prompt=framework_prompt,
                max_tokens=50000,
                temperature=0.07
            )

            if not llm_response.get("success", False):
                return {
                    "success": False,
                    "error": f"LLM framework generation failed: {llm_response.get('error', 'Unknown error')}"
                }

            framework_content = llm_response.get("text", "").strip()
            logger.info(f"‚úÖ Framework content generated: {len(framework_content)} characters")
            logger.info(f"======================================  Framework content: {framework_content}")
            # Parse JSON framework content directly
            import json
            try:
                # Extract JSON from the response
                json_start = framework_content.find('{')
                json_end = framework_content.rfind('}') + 1

                if json_start != -1 and json_end > json_start:
                    json_content = framework_content[json_start:json_end]
                    parsed_json = json.loads(json_content)

                    # Extract slides from JSON
                    slides = parsed_json.get("slides", [])

                    if not slides:
                        return {
                            "success": False,
                            "error": "No slides found in JSON framework content"
                        }

                    logger.info(f"‚úÖ JSON Framework parsing complete: {len(slides)} slides")
                    return {
                        "success": True,
                        "slides": slides,
                        "raw_content": framework_content
                    }
                else:
                    logger.error("‚ùå No valid JSON found in framework content")
                    return {
                        "success": False,
                        "error": "No valid JSON found in framework content"
                    }

            except json.JSONDecodeError as je:
                logger.error(f"‚ùå JSON decode error in framework: {je}")
                # Fallback to old parsing method
                slides = self._parse_framework_content(framework_content)

                if not slides:
                    return {
                        "success": False,
                        "error": "No slides found in framework content (fallback parsing also failed)"
                    }

                logger.info(f"‚úÖ Fallback framework parsing complete: {len(slides)} slides")
                return {
                    "success": True,
                    "slides": slides,
                    "raw_content": framework_content
                }

        except Exception as e:
            logger.error(f"‚ùå Error generating slide framework: {e}")
            return {
                "success": False,
                "error": f"Failed to generate framework: {str(e)}"
            }

    def _create_framework_prompt(
        self,
        lesson_content: str,
        config_prompt: Optional[str] = None
    ) -> str:
        """T·∫°o prompt cho vi·ªác x√¢y d·ª±ng khung slide"""

        # Get current date
        current_date = datetime.now().strftime("%d-%m-%Y")

        prompt = f"""ƒê√≥ng vai tr√≤ ng∆∞·ªùi thi·∫øt k·∫ø b√†i thuy·∫øt tr√¨nh gi√°o d·ª•c kinh nghi·ªám chuy√™n s√¢u.

NHI·ªÜM V·ª§:
- H√£y ƒë·ªçc JSON y√™u c·∫ßu b√™n d∆∞·ªõi v√† t·∫°o danh s√°ch c√°c slide t·ªïng qu√°t d·ª±a tr√™n n·ªôi dung b√†i h·ªçc.
- Ch·ªâ sinh k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON theo ƒë·ªãnh d·∫°ng ƒë·∫ßu ra m·∫´u ·ªü cu·ªëi .

N·ªòI DUNG B√ÄI H·ªåC:
{lesson_content}

JSON Y√äU C·∫¶U:
{{
  "instruction": "Ph√¢n t√≠ch n·ªôi dung b√†i h·ªçc v√† t·∫°o khung slide logic, d·ªÖ theo d√µi.",
  "task":  "Ph√¢n t√≠ch n·ªôi dung b√†i h·ªçc v√† chia th√†nh c√°c slide t·ªïng qu√°t, c√≥ m·ª•c ƒë√≠ch r√µ r√†ng v√† c√°c √Ω ch√≠nh ph√π h·ª£p ƒë·ªÉ tr√¨nh b√†y.",
  "rules": [
    "T√°ch lesson_content th√†nh c√°c slide v·ªõi ti√™u ƒë·ªÅ, m·ª•c ƒë√≠ch v√† c√°c √Ω ch√≠nh r√µ r√†ng.",
    "M·ªói slide th·ªÉ hi·ªán m·ªôt ch·ªß ƒë·ªÅ l·ªõn, v·ªõi m·ª•c ƒë√≠ch c·ª• th·ªÉ v√† n·ªôi dung c·ªët l√µi.",
    "M·ªói slide ch·ª©a t·ªëi ƒëa 2 √Ω l·ªõn. Linh ho·∫°t trong 1-2 √Ω l·ªõn.",
    "C√°c √Ω ch√≠nh c·∫ßn ƒë∆∞·ª£c m√¥ t·∫£ r√µ r√†ng, kh√¥ng s∆° s√†i.",
    "Sau m·ªói √Ω ch√≠nh, th√™m m·ªôt \"note\" th·ªÉ hi·ªán li·ªáu c√≥ c·∫ßn v√≠ d·ª• minh h·ªça ho·∫∑c gi·∫£i th√≠ch th√™m kh√¥ng.",
    "\"images\" th·ªÉ hi·ªán li·ªáu c√≥ c·∫ßn h√¨nh ·∫£nh h·ªó tr·ª£ th√™m kh√¥ng (n√™n c√≥), n·∫øu kh√¥ng h√£y ƒë·ªÉ l√† \"kh√¥ng c·∫ßn h√¨nh ·∫£nh"\.",
    "Slide ƒë·∫ßu ti√™n ph·∫£i l√† slide gi·ªõi thi·ªáu, g·ªìm ƒë√∫ng 3 d√≤ng: t√™n b√†i h·ªçc, m√¥ t·∫£ ng·∫Øn v√† ng√†y t·∫°o b√†i thuy·∫øt tr√¨nh.",
    "ƒê·∫£m b·∫£o tr√¨nh t·ª± c√°c slide c√≥ t√≠nh logic, m·∫°ch l·∫°c, d·ªÖ theo d√µi, ƒë·∫£m b·∫£o s·ª± li√™n k·∫øt gi·ªØa c√°c ph·∫ßn.",
    "\"title\" tuy·ªát ƒë·ªëi kh√¥ng ch·ª©a c√°c ph√¢n c·∫•p nh∆∞ I, 1., a), ...",
    "K√≠ hi·ªáu h√≥a h·ªçc ph·∫£i ch√≠nh x√°c v·ªõi ch·ªâ s·ªë d∆∞·ªõi, tr√™n ho·∫∑c c·∫£ hai, v√≠ d·ª•: H‚ÇÇO (kh√¥ng ph·∫£i H2O), CO‚ÇÇ (kh√¥ng ph·∫£i CO2), Na‚Å∫ (ion natri), Cl‚Åª (ion clorua), CaCO‚ÇÉ, H‚ÇÇSO‚ÇÑ, CH‚ÇÑ, ¬π¬≤‚ÇÜC, etc.",
    "T√πy ch·ªânh k·∫øt qu·∫£ theo personalize trong config b√™n d∆∞·ªõi, v√≠ d·ª•: ƒëi·ªÅu ch·ªânh ƒë·ªô kh√≥, vƒÉn phong, n·ªôi dung tr√¨nh b√†y cho ph√π h·ª£p ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi h·ªçc."
  ],
  "config": {{
    "language": "vietnamese",
    "maxSlides": 20,
    "minSlides": 10,
    "outputFormat": "json",
    "date": "{current_date}",
    "personalize": "{config_prompt if config_prompt else 'Ph√¢n t√≠ch n·ªôi dung b√†i h·ªçc v√† t·∫°o khung slide logic, d·ªÖ theo d√µi.'}"
  }}
}}

JSON ƒê·∫¶U RA:
{{
    "slides": [
      {{
        "slideId": "slide1",
        "type": "intro",
        "title": "[T√™n b√†i h·ªçc]",
        "description": "[M√¥ t·∫£ ng·∫Øn b√†i h·ªçc]",
        "date": "{current_date}"
      }},
      {{
        "slideId": "slide2",
        "type": "content",
        "title": "[Ti√™u ƒë·ªÅ slide]",
        "mainPoints": [
          {{
            "point": "[√ù ch√≠nh 1]",
            "note": "[C√≥ c·∫ßn v√≠ d·ª• minh h·ªça / c·∫ßn gi·∫£i th√≠ch th√™m hay chi ti·∫øt g√¨ kh√¥ng?]",
            "images": "[C·∫ßn h√¨nh ·∫£nh g√¨ kh√¥ng?]"
          }},
          {{
            "point": "[√ù ch√≠nh 2]",
            "note": "[C√≥ c·∫ßn v√≠ d·ª• minh h·ªça / c·∫ßn gi·∫£i th√≠ch th√™m hay chi ti·∫øt g√¨ kh√¥ng?]",
            "images": "[C·∫ßn h√¨nh ·∫£nh g√¨ kh√¥ng?]"
          }}
        ]  
      }}
    ]
  }},
  "_hint": {{
    "slideId": "ƒê·∫∑t ID duy nh·∫•t cho m·ªói slide, d·∫°ng s2_abc",
    "type": "intro ho·∫∑c content",
    "title": "Ti√™u ƒë·ªÅ ch√≠nh c·ªßa slide",
    "purpose": "M·ª•c ti√™u truy·ªÅn ƒë·∫°t c·ªßa slide",
    "mainPoints": "T·ªëi ƒëa 2 m·ª•c ch√≠nh m·ªói slide, m·ªói m·ª•c c√≥ ghi ch√∫ ƒëi k√®m",
    "user_config": "T√πy ch·ªânh ƒë·∫ßu ra theo ƒë·ªëi t∆∞·ª£ng, phong c√°ch, ƒë·ªô kh√≥ v√† y√™u c·∫ßu tr·ª±c quan"
  }}
}}"""

        return prompt

    def _parse_framework_content(self, framework_content: str) -> List[Dict[str, Any]]:
        """Parse framework content th√†nh danh s√°ch slides t·ª´ JSON format m·ªõi"""
        try:
            import json
            slides = []

            # Try to parse as JSON first
            try:
                # Clean the content to extract JSON
                json_start = framework_content.find('{')
                json_end = framework_content.rfind('}') + 1

                if json_start != -1 and json_end > json_start:
                    json_content = framework_content[json_start:json_end]
                    parsed_json = json.loads(json_content)

                    # Extract slides from JSON
                    json_slides = parsed_json.get("slides", [])

                    for i, slide in enumerate(json_slides):
                        slide_data = {
                            "slide_number": i + 1,
                            "title": slide.get("title", ""),
                            "purpose": "",  # Will be derived from mainPoints
                            "main_content": "",  # Will be derived from mainPoints
                            "raw_block": json.dumps(slide, ensure_ascii=False),
                            "slide_id": slide.get("slideId", f"slide{i+1}"),
                            "type": slide.get("type", "content"),
                            "description": slide.get("description", ""),
                            "date": slide.get("date", ""),
                            "main_points": slide.get("mainPoints", []),
                            "lesson_content_used": slide.get("lessonContentUsed", "")
                        }

                        # For intro slides, use description as main_content
                        if slide_data["type"] == "intro":
                            slide_data["main_content"] = f"{slide_data['description']}\n{slide_data['date']}"
                        else:
                            # For content slides, combine main points
                            if slide_data["main_points"]:
                                points_text = []
                                for point in slide_data["main_points"]:
                                    point_text = point.get("point", "")
                                    note_text = point.get("note", "")
                                    if point_text:
                                        points_text.append(f"- {point_text}")
                                        if note_text:
                                            points_text.append(f"  Note: {note_text}")
                                slide_data["main_content"] = "\n".join(points_text)

                        slides.append(slide_data)

                    logger.info(f"‚úÖ Successfully parsed JSON format: {len(slides)} slides")
                    return slides

            except json.JSONDecodeError as je:
                logger.warning(f"‚ö†Ô∏è JSON parsing failed, trying fallback parsing: {je}")

            # Fallback to old parsing method if JSON parsing fails
            slide_blocks = framework_content.split('---')

            for i, block in enumerate(slide_blocks):
                block = block.strip()
                if not block:
                    continue

                slide_data = {
                    "slide_number": i + 1,
                    "title": "",
                    "purpose": "",
                    "main_content": "",
                    "raw_block": block
                }

                # Parse t·ª´ng d√≤ng trong block
                lines = block.split('\n')

                for line in lines:
                    line = line.strip()
                    if not line:
                        continue

                    if line.startswith('SLIDE '):
                        # Extract title t·ª´ "SLIDE 1: [Ti√™u ƒë·ªÅ]"
                        if ':' in line:
                            slide_data["title"] = line.split(':', 1)[1].strip()
                    elif line.startswith('M·ª•c ƒë√≠ch:'):
                        slide_data["purpose"] = line.replace('M·ª•c ƒë√≠ch:', '').strip()
                    elif line.startswith('N·ªôi dung ch√≠nh:'):
                        slide_data["main_content"] = line.replace('N·ªôi dung ch√≠nh:', '').strip()

                # Ch·ªâ th√™m slide n·∫øu c√≥ ƒë·ªß th√¥ng tin c∆° b·∫£n
                if slide_data["title"] or slide_data["purpose"] or slide_data["main_content"]:
                    slides.append(slide_data)

            logger.info(f"üìã Parsed {len(slides)} slides from framework (fallback method)")
            return slides

        except Exception as e:
            logger.error(f"‚ùå Error parsing framework content: {e}")
            return []

    async def _detail_slide_content(
        self,
        framework_slide: Dict[str, Any],
        lesson_content: str,
        config_prompt: Optional[str],
        slide_number: int,
        max_retries: int = 3
    ) -> Dict[str, Any]:
        """
        B∆∞·ªõc 2: Chi ti·∫øt h√≥a n·ªôi dung cho t·ª´ng slide c·ª• th·ªÉ
        Input: lesson_content, default_prompt, config_prompt, khung_slide
        Output: Slide chi ti·∫øt v·ªõi n·ªôi dung ƒë·∫ßy ƒë·ªß
        """
        try:
            logger.info(f"üìù Detailing slide {slide_number}: {framework_slide.get('title', 'Untitled')}")
            logger.info(f"üìã Framework slide: {framework_slide}")
            # T·∫°o prompt cho vi·ªác chi ti·∫øt h√≥a slide
            detail_prompt = self._create_detail_prompt(
                framework_slide,
                lesson_content,
                config_prompt,
                slide_number
            )

            # Retry logic cho LLM
            for attempt in range(max_retries):
                logger.info(f"üîÑ Attempt {attempt + 1}/{max_retries} for slide {slide_number}")

                llm_response = await self.llm_service.generate_content(
                    prompt=detail_prompt,
                    max_tokens=50000,
                    temperature=0.07
                )
                logger.info(f"LLM response detail slide: {llm_response}")
                if llm_response.get("success", False):
                    detailed_content = llm_response.get("text", "").strip()

                    if detailed_content:
                        # Try to parse JSON response
                        parsed_detail = self._parse_detailed_json_response(detailed_content, slide_number)

                        if parsed_detail.get("success", False):
                            logger.info(f"‚úÖ Slide {slide_number} detailed successfully with JSON format")
                            return {
                                "success": True,
                                "content": parsed_detail.get("content", detailed_content),
                                "slide_number": slide_number,
                                "framework": framework_slide,
                                "detailed_json": parsed_detail.get("detailed_json", {})
                            }
                        else:
                            # JSON parsing failed - this should not happen with new logic
                            logger.error(f"‚ùå JSON parsing failed for slide {slide_number} - this should not happen")
                            return {
                                "success": False,
                                "error": "JSON parsing failed",
                                "slide_number": slide_number,
                                "framework": framework_slide
                            }
                    else:
                        logger.warning(f"‚ö†Ô∏è Empty content for slide {slide_number}, attempt {attempt + 1}")
                else:
                    logger.warning(f"‚ö†Ô∏è LLM failed for slide {slide_number}, attempt {attempt + 1}: {llm_response.get('error', 'Unknown error')}")

            # No fallback - must have detailed_json for new logic
            logger.error(f"‚ùå Failed to detail slide {slide_number} after {max_retries} attempts")
            return {
                "success": False,
                "error": f"Failed to detail slide after {max_retries} attempts",
                "slide_number": slide_number,
                "framework": framework_slide
            }

        except Exception as e:
            logger.error(f"‚ùå Error detailing slide {slide_number}: {e}")
            return {
                "success": False,
                "error": f"Failed to detail slide: {str(e)}",
                "slide_number": slide_number
            }

    def _create_detail_prompt(
        self,
        framework_slide: Dict[str, Any],
        lesson_content: str,
        config_prompt: Optional[str],
        slide_number: int
    ) -> str:
        """T·∫°o prompt cho vi·ªác chi ti·∫øt h√≥a slide v·ªõi JSON format m·ªõi"""

        import json

        # Get current date
        current_date = datetime.now().strftime("%d-%m-%Y")

        # Create framework slide JSON for the prompt
        khung_slide_json = {
            "slideId": framework_slide.get("slide_id", f"slide{slide_number}"),
            "type": framework_slide.get("type", "content"),
            "title": framework_slide.get("title", ""),
            "mainPoints": []
        }

        # Handle different slide types
        if framework_slide.get("type") == "intro":
            khung_slide_json["description"] = framework_slide.get("description", "")
            khung_slide_json["date"] = framework_slide.get("date", current_date)
        else:
            # For content slides, use main_points if available, otherwise parse from main_content
            main_points = framework_slide.get("main_points", [])
            if main_points:
                khung_slide_json["mainPoints"] = main_points
            else:
                # Parse from main_content if main_points not available
                main_content = framework_slide.get("main_content", "")
                if main_content:
                    # Simple parsing of main content into points
                    lines = main_content.split('\n')
                    points = []
                    for line in lines:
                        line = line.strip()
                        if line and line.startswith('- '):
                            point_text = line[2:].strip()
                            if point_text:
                                points.append({
                                    "point": point_text,
                                    "note": "C·∫ßn chi ti·∫øt h√≥a n·ªôi dung"
                                })
                    khung_slide_json["mainPoints"] = points

        khung_slide_str = json.dumps(khung_slide_json, ensure_ascii=False, indent=2)

        prompt = f"""ƒê√≥ng vai tr√≤ ng∆∞·ªùi thi·∫øt k·∫ø b√†i thuy·∫øt tr√¨nh gi√°o d·ª•c kinh nghi·ªám chuy√™n s√¢u.

NHI·ªÜM V·ª§:
ƒê·ªçc JSON y√™u c·∫ßu b√™n d∆∞·ªõi v√† chi ti·∫øt h√≥a n·ªôi dung slide c·ª• th·ªÉ d·ª±a tr√™n khung slide, n·ªôi dung b√†i h·ªçc.
Ch·ªâ sinh k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON theo ƒë·ªãnh d·∫°ng ƒë·∫ßu ra m·∫´u ·ªü cu·ªëi .

KHUNG SLIDE:
{khung_slide_str}

N·ªòI DUNG B√ÄI H·ªåC THAM KH·∫¢O:
{lesson_content}

JSON Y√äU C·∫¶U:
{{
  "instruction": "Vi·∫øt n·ªôi dung chi ti·∫øt (vi·∫øt v√†o field pointContent) cho m·ªói √Ω ch√≠nh \"point\" trong (`mainPoints`)",
  "rules": [
    "K√≠ hi·ªáu h√≥a h·ªçc ph·∫£i ch√≠nh x√°c v·ªõi ch·ªâ s·ªë d∆∞·ªõi, tr√™n ho·∫∑c c·∫£ hai, v√≠ d·ª•: H‚ÇÇO (kh√¥ng ph·∫£i H2O), CO‚ÇÇ (kh√¥ng ph·∫£i CO2), Na‚Å∫ (ion natri), Cl‚Åª (ion clorua), CaCO‚ÇÉ, H‚ÇÇSO‚ÇÑ, CH‚ÇÑ, ¬π¬≤‚ÇÜC, etc.",
    "\"pointContent\" ph·∫£i ƒë∆∞·ª£c vi·∫øt d∆∞·ªõi d·∫°ng danh s√°ch c√°c √Ω con, m·ªói √Ω b·∫Øt ƒë·∫ßu b·∫±ng '-'",
    "M·ªói √Ω ph·∫£i tr√¨nh b√†y r√µ r√†ng, ƒë√∫ng ki·∫øn th·ª©c, c√≥ th·ªÉ bao g·ªìm ƒë·ªãnh nghƒ©a, gi·∫£i th√≠ch, c√¥ng th·ª©c, v√≠ d·ª• c·ª• th·ªÉ.",
    "Ki·∫øn th·ª©c b√°m s√°t n·ªôi dung b√†i h·ªçc, chi ti·∫øt v√† ƒë·∫ßy ƒë·ªß.",
    "C√°c d·∫°ng b·∫£ng c√≥ trong N·ªòI DUNG B√ÄI H·ªåC ph·∫£i thay ƒë·ªïi th√†nh d·∫°ng ch·ªØ",
    "\"images\" kh√¥ng b·∫Øt bu·ªôc nh∆∞ng n√™n c√≥, tham kh·∫£o field \"images\" trong KHUNG SLIDE, ƒë·∫∑c bi·ªát ƒë·ªÉ ƒë√∫ng √Ω ch√≠nh.",
    "Vi·∫øt ƒë√∫ng v√† ƒë·ªß c√°c point trong \"mainPoints\" c·ªßa KHUNG SLIDE",
    "TUY·ªÜT ƒê·ªêI KH√îNG th√™m m·ªõi hay x√≥a point n√†o trong \"mainPoints\" c·ªßa KHUNG SLIDE.",
    "T√πy ch·ªânh k·∫øt qu·∫£ theo \"personalize\" trong \"config\" b√™n d∆∞·ªõi, v√≠ d·ª•: ƒëi·ªÅu ch·ªânh ƒë·ªô kh√≥, vƒÉn phong, n·ªôi dung tr√¨nh b√†y cho ph√π h·ª£p ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi h·ªçc."
  ],
  "avoid": [
     "T·∫°o th√™m mainPoints m·ªõi",
     "L·ªùi ch√†o h·ªèi ho·∫∑c m·ªü ƒë·∫ßu nh∆∞: 'Ch√†o m·ª´ng c√°c em'",
     "C√¢u k·∫øt th√∫c nh∆∞: 'Ch√∫c c√°c em h·ªçc t·ªët'",
     "Ng√¥n ng·ªØ h·ªôi tho·∫°i: 'Ch√∫ng ta h√£y c√πng nhau t√¨m hi·ªÉu...'",
     "Emoji ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát nh∆∞ *, ‚Ä¢, |",
     "ƒê·ªãnh d·∫°ng b·∫±ng | ho·∫∑c markdown"
    ],
  "config": {{
    "language": "vietnamese",
    "outputFormat": "json",
    "date": "{current_date}",
    "personalize": "{config_prompt if config_prompt else 'N·ªôi dung slide logic, d·ªÖ theo d√µi, chuy√™n nghi·ªáp.'}"
  }}
}}

JSON ƒê·∫¶U RA:

[
    {{
        "slideId": "{khung_slide_json.get('slideId', f'slide{slide_number}')}",
        "type": "{khung_slide_json.get('type', 'content')}",
        "title": "[Ti√™u ƒë·ªÅ slide]",
        "mainPoints": [
          {{
            "point": "[√ù ch√≠nh 1]",
            "number": 1,
            "pointContent": [
              "[N·ªôi dung cho √ù ch√≠nh 1]",
              "[N·ªôi dung cho √ù ch√≠nh 1]",
              "[N·ªôi dung cho √ù ch√≠nh 1]"
            ],
            "images": {{
              "name": "[T√™n h√¨nh ·∫£nh]",
              "content": "[M√¥ t·∫£ h√¨nh ·∫£nh h·ªó tr·ª£ cho n·ªôi dung b·∫±ng ch·ªØ ]"
            }}
          }},
          {{
            "point": "[√ù ch√≠nh 2]",
            "number": 2,
            "pointContent": [
              "[N·ªôi dung cho √ù ch√≠nh 2]",
              "[N·ªôi dung cho √ù ch√≠nh 2]"
            ],
            "images": {{
              "name": "[T√™n h√¨nh ·∫£nh]",
              "content": "[M√¥ t·∫£ h√¨nh ·∫£nh h·ªó tr·ª£ cho n·ªôi dung b·∫±ng ch·ªØ ]"
            }}
          }}
        ]
    }}
]"""

        return prompt

    def _parse_detailed_json_response(self, detailed_content: str, slide_number: int) -> Dict[str, Any]:
        """Parse detailed JSON response from LLM"""
        try:
            import json

            # Try to extract JSON from the response
            json_start = detailed_content.find('[')
            json_end = detailed_content.rfind(']') + 1

            if json_start != -1 and json_end > json_start:
                json_content = detailed_content[json_start:json_end]
                parsed_json = json.loads(json_content)

                if isinstance(parsed_json, list) and len(parsed_json) > 0:
                    slide_data = parsed_json[0]  # Get first slide from array

                    # Convert detailed JSON to text content for backward compatibility
                    text_content = self._convert_detailed_json_to_text(slide_data)

                    logger.info(f"‚úÖ Successfully parsed detailed JSON for slide {slide_number}")
                    return {
                        "success": True,
                        "content": text_content,
                        "detailed_json": slide_data
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è Invalid JSON structure for slide {slide_number}")
                    return {"success": False, "error": "Invalid JSON structure"}
            else:
                logger.warning(f"‚ö†Ô∏è No JSON found in response for slide {slide_number}")
                return {"success": False, "error": "No JSON found"}

        except json.JSONDecodeError as je:
            logger.warning(f"‚ö†Ô∏è JSON decode error for slide {slide_number}: {je}")
            return {"success": False, "error": f"JSON decode error: {str(je)}"}
        except Exception as e:
            logger.error(f"‚ùå Error parsing detailed JSON for slide {slide_number}: {e}")
            return {"success": False, "error": f"Parsing error: {str(e)}"}

    def _convert_detailed_json_to_text(self, slide_data: Dict[str, Any]) -> str:
        """Convert detailed JSON slide data to text format for backward compatibility"""
        try:
            text_parts = []

            # Add title
            title = slide_data.get("title", "")
            if title:
                text_parts.append(title)
                text_parts.append("")  # Empty line

            # Process main points
            main_points = slide_data.get("mainPoints", [])
            for main_point in main_points:
                point_text = main_point.get("point", "")
                if point_text:
                    text_parts.append(point_text)

                # Process point contents (format m·ªõi v·ªõi pointContent l√† array)
                point_content = main_point.get("pointContent", [])
                if isinstance(point_content, list):
                    # pointContent l√† array, th√™m t·ª´ng item v·ªõi d·∫•u g·∫°ch ƒë·∫ßu d√≤ng
                    for content_item in point_content:
                        if content_item and content_item.strip():
                            text_parts.append(f"- {content_item.strip()}")
                elif point_content:
                    # Fallback cho format c≈© (pointContent l√† string)
                    text_parts.append(f"- {point_content}")

                text_parts.append("")  # Empty line between main points

            # Join all parts
            result = "\n".join(text_parts).strip()

            # Remove multiple consecutive empty lines
            while "\n\n\n" in result:
                result = result.replace("\n\n\n", "\n\n")

            return result

        except Exception as e:
            logger.error(f"‚ùå Error converting detailed JSON to text: {e}")
            return str(slide_data)  # Fallback to string representation

    def _map_placeholders_from_json(
        self,
        detailed_json: Dict[str, Any],
        slide_number: int
    ) -> Dict[str, Any]:
        """
        B∆∞·ªõc 3: G·∫Øn placeholder tr·ª±c ti·∫øp t·ª´ JSON chi ti·∫øt (kh√¥ng g·ªçi LLM)
        Input: detailed_json t·ª´ b∆∞·ªõc chi ti·∫øt h√≥a
        Output: Slide v·ªõi placeholder ƒë∆∞·ª£c g·∫Øn theo quy t·∫Øc
        """
        try:
            logger.info(f"üè∑Ô∏è Mapping placeholders from JSON for slide {slide_number}")

            # T·∫°o slide data tr·ª±c ti·∫øp t·ª´ JSON
            slide_data = self._create_slide_data_from_json(detailed_json, slide_number)

            # Validate v√† fix 1:1 mapping
            validated_slide_data = self._validate_and_fix_mapping(slide_data, slide_number)

            logger.info(f"‚úÖ Placeholders mapped from JSON for slide {slide_number}")
            logger.info(f"üìã Placeholder summary: {validated_slide_data}")

            return {
                "success": True,
                "slide_data": validated_slide_data,
                "raw_content": str(detailed_json)
            }

        except Exception as e:
            logger.error(f"‚ùå Error mapping placeholders from JSON for slide {slide_number}: {e}")
            return {
                "success": False,
                "error": f"Failed to map placeholders from JSON: {str(e)}"
            }

    def _create_slide_data_from_json(
        self,
        detailed_json: Dict[str, Any],
        slide_number: int
    ) -> Dict[str, Any]:
        """T·∫°o slide data v·ªõi placeholder t·ª´ detailed JSON theo format m·ªõi"""
        try:
            slide_type = detailed_json.get("type", "content")

            # Initialize slide data structure
            slide_data = {
                "parsed_data": {
                    "LessonName": [],
                    "LessonDescription": [],
                    "CreatedDate": [],
                    "TitleName": [],
                    "MainPointName": [],
                    "MainPointContent": [],
                    "ImageName": [],
                    "ImageContent": []
                },
                "placeholder_counts": {},
                "description": []  # New field for placeholder descriptions
            }

            if slide_type == "intro":
                # Handle intro slide
                title = detailed_json.get("title", "")
                description = detailed_json.get("description", "")
                date = detailed_json.get("date", "")

                if title:
                    slide_data["parsed_data"]["LessonName"].append({"content": title})
                    slide_data["placeholder_counts"]["LessonName"] = 1
                    # Add description without number since there's only one
                    slide_data["description"].append(f"LessonName_{len(title)}")

                if description:
                    slide_data["parsed_data"]["LessonDescription"].append({"content": description})
                    slide_data["placeholder_counts"]["LessonDescription"] = 1
                    slide_data["description"].append(f"LessonDescription_{len(description)}")

                if date:
                    slide_data["parsed_data"]["CreatedDate"].append({"content": date})
                    slide_data["placeholder_counts"]["CreatedDate"] = 1
                    slide_data["description"].append(f"CreatedDate_{len(date)}")

            else:
                # Handle content slide - logic ƒë∆°n gi·∫£n v·ªõi format m·ªõi
                title = detailed_json.get("title", "")
                main_points = detailed_json.get("mainPoints", [])

                # Add title -> TitleName
                if title:
                    slide_data["parsed_data"]["TitleName"].append({"content": title})
                    slide_data["placeholder_counts"]["TitleName"] = 1
                    slide_data["description"].append(f"TitleName_{len(title)}")

                # Process main points v·ªõi format m·ªõi
                image_counter = 0  # Counter cho images t·ª´ t·∫•t c·∫£ main points
                for main_point_idx, main_point in enumerate(main_points, 1):
                    point_text = main_point.get("point", "")
                    point_content = main_point.get("pointContent", [])  # B√¢y gi·ªù l√† array

                    # point -> MainPointName
                    if point_text:
                        slide_data["parsed_data"]["MainPointName"].append({
                            "content": {0: point_text},  # Tr·∫£ v·ªÅ d·∫°ng map v·ªõi key l√† index
                            "main_point": main_point_idx,
                            "position_key": f"MainPointName_{main_point_idx}"
                        })
                        slide_data["description"].append(f"MainPointName_{main_point_idx}_{len(point_text)}")

                    # pointContent -> MainPointContent (x·ª≠ l√Ω array)
                    if point_content and isinstance(point_content, list):
                        # Chuy·ªÉn array th√†nh map v·ªõi key l√† index
                        content_map = {i: content for i, content in enumerate(point_content) if content.strip()}

                        if content_map:  # Ch·ªâ th√™m n·∫øu c√≥ n·ªôi dung
                            slide_data["parsed_data"]["MainPointContent"].append({
                                "content": content_map,  # Tr·∫£ v·ªÅ d·∫°ng map v·ªõi key l√† index
                                "main_point": main_point_idx,
                                "position_key": f"MainPointContent_{main_point_idx}"
                            })
                            total_content_length = sum(len(str(content)) for content in content_map.values())
                            slide_data["description"].append(f"MainPointContent_{main_point_idx}_{total_content_length}")

                    # Process images t·ª´ trong main point
                    main_point_images = main_point.get("images", {})
                    if main_point_images and isinstance(main_point_images, dict):
                        image_counter += 1
                        image_name = main_point_images.get("name", "")
                        image_content = main_point_images.get("content", "")

                        # name -> ImageName
                        if image_name:
                            slide_data["parsed_data"]["ImageName"].append({
                                "content": {0: image_name},  # Map v·ªõi key "0"
                                "image": image_counter,
                                "position_key": f"ImageName_{image_counter}"
                            })
                            slide_data["description"].append(f"ImageName_{image_counter}_{len(image_name)}")

                        # content -> ImageContent (ch·ªâ key "0")
                        if image_content:
                            slide_data["parsed_data"]["ImageContent"].append({
                                "content": {0: image_content},  # Map v·ªõi key "0"
                                "image": image_counter,
                                "position_key": f"ImageContent_{image_counter}"
                            })
                            slide_data["description"].append(f"ImageContent_{image_counter}_{len(image_content)}")



                # Update placeholder counts
                slide_data["placeholder_counts"]["MainPointName"] = len(slide_data["parsed_data"]["MainPointName"])
                slide_data["placeholder_counts"]["MainPointContent"] = len(slide_data["parsed_data"]["MainPointContent"])
                slide_data["placeholder_counts"]["ImageName"] = len(slide_data["parsed_data"]["ImageName"])
                slide_data["placeholder_counts"]["ImageContent"] = len(slide_data["parsed_data"]["ImageContent"])

            logger.info(f"üìä Created slide data for slide {slide_number}:")
            logger.info(f"   Placeholder counts: {slide_data['placeholder_counts']}")
            logger.info(f"   Description: {slide_data['description']}")
            return slide_data

        except Exception as e:
            logger.error(f"‚ùå Error creating slide data from JSON for slide {slide_number}: {e}")
            raise

    def _validate_and_fix_mapping(self, slide_data: Dict[str, Any], slide_number: int) -> Dict[str, Any]:
        """
        Validate slide data - logic ƒë∆°n gi·∫£n
        """
        try:
            logger.info(f"üîç Validating slide data for slide {slide_number}")

            placeholder_counts = slide_data.get("placeholder_counts", {})

            # Logic ƒë∆°n gi·∫£n - ch·ªâ log placeholder counts
            logger.info(f"ÔøΩ Placeholder counts: {placeholder_counts}")
            logger.info(f"‚úÖ Slide {slide_number} validation complete")

            return slide_data

        except Exception as e:
            logger.error(f"‚ùå Error validating mapping for slide {slide_number}: {e}")
            # Return original data if validation fails
            return slide_data

    def _generate_slide_description(self, placeholder_counts: Dict[str, int]) -> str:
        """
        Generate description for slide based on placeholder counts (t·ª´ lu·ªìng c≈©)

        Args:
            placeholder_counts: Dictionary of placeholder type counts

        Returns:
            str: Generated description
        """
        try:
            if not placeholder_counts:
                return "Slide tr·ªëng"

            descriptions = []
            for placeholder_type, count in placeholder_counts.items():
                if count > 0:
                    if count == 1:
                        descriptions.append(f"1 {placeholder_type}")
                    else:
                        descriptions.append(f"{count} {placeholder_type}")

            if descriptions:
                return f"Slide d√†nh cho {', '.join(descriptions)}"
            else:
                return "Slide tr·ªëng"

        except Exception as e:
            logger.warning(f"Error generating slide description: {e}")
            return "Slide kh√¥ng x√°c ƒë·ªãnh"
    def _parse_description_to_counts(self, description: str) -> Dict[str, int]:
        """
        Parse description t·ª´ Kafka format m·ªõi th√†nh placeholder counts
        V√≠ d·ª•: "MainPointName_1_80, MainPointName_2_80, SubPointContent_1_1_80"
        -> {"MainPointName": 2, "SubPointContent": 1}
        """
        try:
            placeholder_counts = {}

            if not description or not description.strip():
                return placeholder_counts

            # Split by comma ƒë·ªÉ l·∫•y t·ª´ng placeholder
            placeholders = [p.strip() for p in description.split(',')]

            for placeholder in placeholders:
                if not placeholder:
                    continue

                # Extract placeholder type t·ª´ format: PlaceholderType_numbers_maxlength
                parts = placeholder.split('_')
                if len(parts) >= 2:
                    placeholder_type = parts[0]

                    # Count occurrences of each placeholder type
                    if placeholder_type in placeholder_counts:
                        placeholder_counts[placeholder_type] += 1
                    else:
                        placeholder_counts[placeholder_type] = 1

            logger.info(f"üìã Parsed Kafka description '{description}' -> {placeholder_counts}")
            return placeholder_counts

        except Exception as e:
            logger.error(f"‚ùå Error parsing Kafka description '{description}': {e}")
            return {}

    async def _handle_max_length_content(
        self,
        content: str,
        max_length: int,
        placeholder_type: str,
        max_retries: int = 3
    ) -> str:
        """X·ª≠ l√Ω content v∆∞·ª£t qu√° max_length"""
        try:
            if len(content) <= max_length:
                return content

            logger.info(f"‚ö†Ô∏è Content too long for {placeholder_type}: {len(content)} > {max_length}")

            # S·ª≠ d·ª•ng bi·∫øn working_content ƒë·ªÉ l∆∞u k·∫øt qu·∫£ t·ª´ l·∫ßn retry tr∆∞·ªõc
            working_content = content

            # Retry v·ªõi LLM ƒë·ªÉ r√∫t g·ªçn
            for attempt in range(max_retries):
                logger.info(f"üîÑ Retry {attempt + 1}/{max_retries} to shorten content...")

                # S·ª≠ d·ª•ng working_content thay v√¨ content g·ªëc
                shorten_prompt = f"""
H√£y r√∫t g·ªçn n·ªôi dung sau ƒë·ªÉ kh√¥ng v∆∞·ª£t qu√° {max_length} k√Ω t·ª±, gi·ªØ nguy√™n √Ω nghƒ©a ch√≠nh:

ORIGINAL CONTENT:
{working_content}

REQUIREMENTS:
- T·ªëi ƒëa {max_length} k√Ω t·ª±
- Gi·ªØ nguy√™n √Ω nghƒ©a ch√≠nh
- Ph√π h·ª£p v·ªõi {placeholder_type}
- K√≠ hi·ªáu h√≥a h·ªçc ph·∫£i ch√≠nh x√°c v·ªõi ch·ªâ s·ªë d∆∞·ªõi, tr√™n ho·∫∑c c·∫£ hai, v√≠ d·ª•: H‚ÇÇO (kh√¥ng ph·∫£i H2O), CO‚ÇÇ (kh√¥ng ph·∫£i CO2), Na‚Å∫ (ion natri), Cl‚Åª (ion clorua), CaCO‚ÇÉ, H‚ÇÇSO‚ÇÑ, CH‚ÇÑ, ¬π¬≤‚ÇÜC, etc.

SHORTENED CONTENT:"""

                llm_response = await self.llm_service.generate_content(
                    prompt=shorten_prompt,
                    max_tokens=20000,
                    temperature=0.1
                )

                if llm_response.get("success", False):
                    shortened_content = llm_response.get("text", "").strip()
                    if len(shortened_content) <= max_length:
                        logger.info(f"‚úÖ Content shortened: {len(shortened_content)} chars")
                        return shortened_content
                    else:
                        # C·∫≠p nh·∫≠t working_content v·ªõi k·∫øt qu·∫£ v·ª´a ƒë∆∞·ª£c l√†m ng·∫Øn ƒë·ªÉ s·ª≠ d·ª•ng cho l·∫ßn retry ti·∫øp theo
                        logger.warning(f"‚ö†Ô∏è Shortened content still too long: {len(shortened_content)} > {max_length}")
                        working_content = shortened_content

            # Kh√¥ng s·ª≠ d·ª•ng fallback truncation
            logger.error(f"‚ùå Failed to shorten content for {placeholder_type} after {max_retries} retries")
            return content  # Tr·∫£ v·ªÅ content g·ªëc, ƒë·ªÉ frontend x·ª≠ l√Ω

        except Exception as e:
            logger.error(f"‚ùå Error handling max_length content: {e}")
            return content  # Tr·∫£ v·ªÅ content g·ªëc, kh√¥ng truncate

    async def _handle_max_length_content_map(
        self,
        content_map: any,
        max_length: int,
        placeholder_type: str,
        max_retries: int = 3
    ) -> Dict[str, str]:
        """X·ª≠ l√Ω content map v∆∞·ª£t qu√° max_length b·∫±ng LLM"""
        try:
            # N·∫øu kh√¥ng ph·∫£i dict, chuy·ªÉn th√†nh dict v·ªõi key "0"
            if not isinstance(content_map, dict):
                content_map = {"0": str(content_map)}
            # T√≠nh t·ªïng ƒë·ªô d√†i hi·ªán t·∫°i
            current_total_length = sum(len(str(value)) for value in content_map.values())

            if current_total_length <= max_length:
                return content_map

            logger.info(f"‚ö†Ô∏è Content map too long for {placeholder_type}: {current_total_length} > {max_length}")

            # S·ª≠ d·ª•ng bi·∫øn working_content_map ƒë·ªÉ l∆∞u k·∫øt qu·∫£ t·ª´ l·∫ßn retry tr∆∞·ªõc
            working_content_map = content_map

            # Retry v·ªõi LLM ƒë·ªÉ r√∫t g·ªçn t·ª´ng ph·∫ßn t·ª≠
            for attempt in range(max_retries):
                logger.info(f"üîÑ Retry {attempt + 1}/{max_retries} to shorten content map...")

                import json
                # S·ª≠ d·ª•ng working_content_map thay v√¨ content_map g·ªëc
                content_map_json = json.dumps(working_content_map, ensure_ascii=False, indent=2)

                shorten_prompt = f"""
H√£y r√∫t g·ªçn n·ªôi dung trong JSON map sau ƒë·ªÉ t·ªïng s·ªë k√Ω t·ª± kh√¥ng v∆∞·ª£t qu√° {max_length} k√Ω t·ª±, gi·ªØ nguy√™n √Ω nghƒ©a ch√≠nh:

ORIGINAL CONTENT MAP:
{content_map_json}

REQUIREMENTS:
- T·ªïng s·ªë k√Ω t·ª± c·ªßa t·∫•t c·∫£ values kh√¥ng v∆∞·ª£t qu√° {max_length} k√Ω t·ª±
- Gi·ªØ nguy√™n √Ω nghƒ©a ch√≠nh c·ªßa t·ª´ng ph·∫ßn t·ª≠
- Gi·ªØ nguy√™n c·∫•u tr√∫c JSON map v·ªõi c√°c key nh∆∞ ban ƒë·∫ßu
- K√≠ hi·ªáu h√≥a h·ªçc ph·∫£i ch√≠nh x√°c v·ªõi ch·ªâ s·ªë d∆∞·ªõi, tr√™n ho·∫∑c c·∫£ hai, v√≠ d·ª•: H‚ÇÇO (kh√¥ng ph·∫£i H2O), CO‚ÇÇ (kh√¥ng ph·∫£i CO2), Na‚Å∫ (ion natri), Cl‚Åª (ion clorua), CaCO‚ÇÉ, H‚ÇÇSO‚ÇÑ, CH‚ÇÑ, ¬π¬≤‚ÇÜC, etc.
- Ch·ªâ tr·∫£ v·ªÅ JSON map, kh√¥ng c√≥ text gi·∫£i th√≠ch th√™m

SHORTENED CONTENT MAP:"""

                llm_response = await self.llm_service.generate_content(
                    prompt=shorten_prompt,
                    max_tokens=45000,
                    temperature=0.1
                )

                if llm_response.get("success", False):
                    shortened_content = llm_response.get("text", "").strip()

                    try:
                        # Parse JSON response
                        json_start = shortened_content.find('{')
                        json_end = shortened_content.rfind('}') + 1

                        if json_start != -1 and json_end > json_start:
                            json_content = shortened_content[json_start:json_end]
                            shortened_map = json.loads(json_content)

                            # Ki·ªÉm tra t·ªïng ƒë·ªô d√†i
                            new_total_length = sum(len(str(value)) for value in shortened_map.values())

                            if new_total_length <= max_length:
                                logger.info(f"‚úÖ Content map shortened: {new_total_length} chars (was {current_total_length})")
                                return shortened_map
                            else:
                                logger.warning(f"‚ö†Ô∏è Shortened map still too long: {new_total_length} > {max_length}")
                                # C·∫≠p nh·∫≠t working_content_map v·ªõi k·∫øt qu·∫£ v·ª´a ƒë∆∞·ª£c l√†m ng·∫Øn ƒë·ªÉ s·ª≠ d·ª•ng cho l·∫ßn retry ti·∫øp theo
                                working_content_map = shortened_map
                                current_total_length = new_total_length
                        else:
                            logger.warning(f"‚ö†Ô∏è No valid JSON found in LLM response")

                    except json.JSONDecodeError as je:
                        logger.warning(f"‚ö†Ô∏è JSON decode error: {je}")

            # Tr·∫£ v·ªÅ k·∫øt qu·∫£ c·ªßa l·∫ßn th·ª≠ cu·ªëi c√πng thay v√¨ content g·ªëc
            final_length = sum(len(str(value)) for value in working_content_map.values())
            logger.warning(f"‚ö†Ô∏è Using best shortened result after {max_retries} retries: {final_length} chars (target: {max_length})")
            return working_content_map  # Tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ªët nh·∫•t ƒë√£ l√†m ng·∫Øn

        except Exception as e:
            logger.error(f"‚ùå Error handling max_length content map: {e}")
            return content_map  # Tr·∫£ v·ªÅ content g·ªëc n·∫øu c√≥ l·ªói exception

    def _find_best_matching_template_with_max_length(
        self,
        slide_description: List[str],
        template_slides: List[Dict[str, Any]],
        used_slide_ids: set
    ) -> Optional[Dict[str, Any]]:
        """
        T√¨m template slide ph√π h·ª£p nh·∫•t d·ª±a tr√™n description v√† max_length requirements

        QUY T·∫ÆC CH·ªåN SLIDE M·ªöI:
        1. B·∫Øt bu·ªôc ch·ªçn ƒë√∫ng placeholder kh√¥ng d∆∞ kh√¥ng thi·∫øu
        2. N·∫øu c√≥ tr√™n 2 slide ph√π h·ª£p -> ch·ªçn ra c√°i n√†o c√≥ max_length nhi·ªÅu h∆°n
        3. N·∫øu max_length c·ªßa slide nhi·ªÅu h∆°n v·∫´n ch∆∞a ƒë√°p ·ª©ng ƒë∆∞·ª£c th√¨ b·ªè v√†o LLM l√†m ng·∫Øn
        4. C√≥ th·ªÉ d√πng l·∫°i slide ƒë√£ d√πng

        Args:
            slide_description: List c√°c placeholder descriptions t·ª´ slide (e.g., ["MainPointName_1_120", "TitleName_100"])
            template_slides: List c√°c template slides
            used_slide_ids: Set c√°c slide IDs ƒë√£ s·ª≠ d·ª•ng

        Returns:
            Dict slide template ph√π h·ª£p nh·∫•t ho·∫∑c None
        """
        try:
            logger.info(f"üîç Finding best template for description: {slide_description}")

            # Parse slide requirements from description
            slide_requirements = self._parse_slide_description(slide_description)

            matching_templates = []

            for template in template_slides:
                template_id = template.get("id")

                # Skip used templates (ch·ªâ khi t√¨m l·∫ßn ƒë·∫ßu)
                if template_id in used_slide_ids:
                    continue

                # Parse template description (from Kafka format)
                template_description = template.get("description", "")
                template_requirements = self._parse_template_description(template_description)

                # Check if template matches slide requirements (EXACT MATCH - kh√¥ng d∆∞ kh√¥ng thi·∫øu)
                match_score = self._calculate_template_match_score(
                    slide_requirements,
                    template_requirements
                )

                if match_score > 0:
                    # T√≠nh t·ªïng max_length c·ªßa template ƒë·ªÉ ∆∞u ti√™n template c√≥ max_length l·ªõn h∆°n
                    total_max_length = sum(req.get("max_length", 0) for req in template_requirements.values())

                    matching_templates.append({
                        "template": template,
                        "score": match_score,
                        "requirements": template_requirements,
                        "total_max_length": total_max_length
                    })

            if not matching_templates:
                logger.error(f"‚ùå No exact matching templates found for slide requirements!")
                logger.error(f"   Slide description: {slide_description}")
                logger.error(f"   Slide requirements: {slide_requirements}")
                logger.error(f"   Available templates checked: {len(template_slides)}")

                # Log all available templates for debugging
                for i, template in enumerate(template_slides):
                    template_desc = template.get("description", "")
                    template_id = template.get("id", "unknown")
                    logger.error(f"   Template {i+1}: {template_id} - {template_desc}")

                raise ValueError(f"No exact matching template found for slide requirements: {list(slide_requirements.keys())}")

            # QUY T·∫ÆC CH·ªåN SLIDE M·ªöI:
            # 1. N·∫øu c√≥ tr√™n 2 slide ph√π h·ª£p -> ch·ªçn ra c√°i n√†o c√≥ max_length nhi·ªÅu h∆°n
            # 2. N·∫øu max_length b·∫±ng nhau th√¨ ch·ªçn theo match_score cao h∆°n
            if len(matching_templates) >= 2:
                logger.info(f"üîç Found {len(matching_templates)} matching templates, selecting by max_length priority")

                # Sort theo th·ª© t·ª± ∆∞u ti√™n:
                # 1. total_max_length (cao h∆°n = t·ªët h∆°n)
                # 2. match_score (cao h∆°n = t·ªët h∆°n)
                matching_templates.sort(key=lambda x: (x["total_max_length"], x["score"]), reverse=True)

                # Log th√¥ng tin c√°c template ƒë·ªÉ debug
                for i, match in enumerate(matching_templates[:3]):  # Log top 3
                    template_id = match["template"].get("id", "unknown")
                    logger.info(f"   Rank {i+1}: {template_id} - max_length: {match['total_max_length']}, score: {match['score']:.2f}")
            else:
                # Ch·ªâ c√≥ 1 template ph√π h·ª£p, sort theo score
                matching_templates.sort(key=lambda x: x["score"], reverse=True)

            best_match = matching_templates[0]
            template_id = best_match['template'].get('id', 'unknown')

            logger.info(f"‚úÖ Selected best template: {template_id}")
            logger.info(f"   Total max_length: {best_match['total_max_length']}")
            logger.info(f"   Match score: {best_match['score']:.2f}")

            return best_match["template"]

        except ValueError as ve:
            # Re-raise ValueError ƒë·ªÉ logic reuse c√≥ th·ªÉ catch ƒë∆∞·ª£c
            logger.debug(f"üîç ValueError in template matching: {ve}")
            raise ve
        except Exception as e:
            logger.error(f"‚ùå Unexpected error finding best matching template: {e}")
            raise ValueError(f"Unexpected error in template matching: {str(e)}")

    def _parse_slide_description(self, slide_description: List[str]) -> Dict[str, Any]:
        """Parse slide description into structured requirements"""
        try:
            requirements = {}

            for desc in slide_description:
                parts = desc.split('_')
                if len(parts) >= 2:
                    placeholder_type = parts[0]
                    content_length = int(parts[-1])  # Last part is always length

                    # Handle numbered placeholders (e.g., MainPointName_1_120)
                    if len(parts) == 3 and parts[1].isdigit():
                        number = int(parts[1])
                        key = f"{placeholder_type}_{number}"
                    # Handle double-numbered placeholders (e.g., SubPointName_1_1_120)
                    elif len(parts) == 4 and parts[1].isdigit() and parts[2].isdigit():
                        main_num = int(parts[1])
                        sub_num = int(parts[2])
                        key = f"{placeholder_type}_{main_num}_{sub_num}"
                    # Handle non-numbered placeholders (e.g., TitleName_100)
                    else:
                        key = placeholder_type

                    requirements[key] = {
                        "type": placeholder_type,
                        "length": content_length
                    }

            return requirements

        except Exception as e:
            logger.error(f"‚ùå Error parsing slide description: {e}")
            return {}

    def _parse_template_description(self, template_description: str) -> Dict[str, Any]:
        """Parse template description from Kafka format"""
        try:
            requirements = {}

            if not template_description:
                return requirements

            # Split by comma and parse each placeholder
            placeholders = [p.strip() for p in template_description.split(',')]

            for placeholder in placeholders:
                if not placeholder:
                    continue

                parts = placeholder.split('_')
                if len(parts) >= 2:
                    placeholder_type = parts[0]
                    max_length = int(parts[-1])  # Last part is max_length

                    # Handle numbered placeholders
                    if len(parts) == 3 and parts[1].isdigit():
                        number = int(parts[1])
                        key = f"{placeholder_type}_{number}"
                    # Handle double-numbered placeholders
                    elif len(parts) == 4 and parts[1].isdigit() and parts[2].isdigit():
                        main_num = int(parts[1])
                        sub_num = int(parts[2])
                        key = f"{placeholder_type}_{main_num}_{sub_num}"
                    # Handle non-numbered placeholders
                    else:
                        key = placeholder_type

                    requirements[key] = {
                        "type": placeholder_type,
                        "max_length": max_length
                    }

            return requirements

        except Exception as e:
            logger.error(f"‚ùå Error parsing template description: {e}")
            return {}

    def _calculate_template_match_score(
        self,
        slide_requirements: Dict[str, Any],
        template_requirements: Dict[str, Any]
    ) -> float:
        """Calculate match score between slide and template requirements"""
        try:
            if not slide_requirements or not template_requirements:
                return 0.0

            # Check for EXACT placeholder match - no more, no less
            slide_keys = set(slide_requirements.keys())
            template_keys = set(template_requirements.keys())

            # Must have EXACT match - same placeholders, same count
            if slide_keys != template_keys:
                logger.debug(f"‚ùå Template placeholders don't match exactly:")
                logger.debug(f"   Slide needs: {slide_keys}")
                logger.debug(f"   Template has: {template_keys}")
                if slide_keys - template_keys:
                    logger.debug(f"   Template missing: {slide_keys - template_keys}")
                if template_keys - slide_keys:
                    logger.debug(f"   Template has extra: {template_keys - slide_keys}")
                return 0.0

            total_score = 0.0
            total_placeholders = len(slide_keys)

            for key in slide_keys:
                slide_req = slide_requirements[key]
                template_req = template_requirements[key]

                slide_length = slide_req["length"]
                template_max_length = template_req["max_length"]

                # Calculate score based on how well template accommodates content
                if slide_length <= template_max_length:
                    # Perfect fit or template has more space - good score
                    score = 1.0
                else:
                    # Content exceeds template max_length - lower score but still possible
                    # Score decreases as the excess increases
                    excess_ratio = (slide_length - template_max_length) / template_max_length
                    score = max(0.1, 1.0 - excess_ratio)  # Minimum score of 0.1

                total_score += score

            # Average score across all placeholders (exact match only)
            final_score = total_score / total_placeholders if total_placeholders > 0 else 0.0

            logger.debug(f"üìä Template match score: {final_score:.2f}")
            return final_score

        except Exception as e:
            logger.error(f"‚ùå Error calculating template match score: {e}")
            return 0.0

    def _find_exact_matching_template(
        self,
        required_placeholders: List[str],
        required_counts: Dict[str, int],
        template_slides: List[Dict[str, Any]],
        used_slide_ids: set
    ) -> Optional[Dict[str, Any]]:
        """
        T√¨m template slide match ch√≠nh x√°c v·ªõi required placeholders v√† counts
        (T∆∞∆°ng t·ª± logic trong lu·ªìng c≈©, kh√¥ng fallback)

        Args:
            required_placeholders: List placeholder types c·∫ßn thi·∫øt
            required_counts: Dict s·ªë l∆∞·ª£ng t·ª´ng placeholder type
            template_slides: List c√°c template slides
            used_slide_ids: Set c√°c slide IDs ƒë√£ s·ª≠ d·ª•ng

        Returns:
            Dict slide template match ch√≠nh x√°c ho·∫∑c None
        """
        try:
            for slide in template_slides:
                slide_id = slide.get("id")  # Format m·ªõi s·ª≠ d·ª•ng "id" thay v√¨ "slideId"

                # Skip used slides
                if slide_id in used_slide_ids:
                    continue

                # S·ª≠ d·ª•ng description c√≥ s·∫µn thay v√¨ ph√¢n t√≠ch l·∫°i
                description = slide.get("description", "")
                slide_placeholder_counts = self._parse_description_to_counts(description)

                # Check for EXACT match: same placeholder types and same counts
                required_set = set(required_placeholders)
                slide_set = set(slide_placeholder_counts.keys())

                if required_set == slide_set:
                    # Check if counts also match exactly
                    counts_match = True
                    for placeholder_type, required_count in required_counts.items():
                        slide_count = slide_placeholder_counts.get(placeholder_type, 0)
                        if slide_count != required_count:
                            counts_match = False
                            break

                    if counts_match:
                        logger.info(f"‚úÖ Found EXACT matching template: {slide_id}")
                        logger.info(f"   Required: {required_counts}")
                        logger.info(f"   Template has: {slide_placeholder_counts}")
                        return slide
                    else:
                        logger.debug(f"‚ùå Template {slide_id}: placeholder types match but counts differ")
                        logger.debug(f"   Required: {required_counts}")
                        logger.debug(f"   Template has: {slide_placeholder_counts}")
                else:
                    logger.debug(f"‚ùå Template {slide_id}: placeholder types don't match")
                    logger.debug(f"   Required: {required_set}")
                    logger.debug(f"   Template has: {slide_set}")

            logger.info(f"‚ùå No EXACT matching template found for: {required_counts}")
            return None

        except Exception as e:
            logger.error(f"Error finding exact matching template: {e}")
            return None

    def _find_exact_matching_template_with_reuse(
        self,
        required_placeholders: List[str],
        required_counts: Dict[str, int],
        template_slides: List[Dict[str, Any]]
    ) -> Optional[Dict[str, Any]]:
        """
        T√¨m template slide match ch√≠nh x√°c v·ªõi required placeholders (cho ph√©p reuse)
        (T∆∞∆°ng t·ª± logic trong lu·ªìng c≈©)

        Args:
            required_placeholders: List placeholder types c·∫ßn thi·∫øt
            required_counts: Dict s·ªë l∆∞·ª£ng t·ª´ng placeholder type
            template_slides: List c√°c template slides

        Returns:
            Dict slide template match ch√≠nh x√°c ho·∫∑c None
        """
        try:
            logger.info(f"üîç Finding exact matching template with reuse support...")

            for slide in template_slides:
                slide_id = slide.get("id")  # Format m·ªõi s·ª≠ d·ª•ng "id" thay v√¨ "slideId"

                # S·ª≠ d·ª•ng description c√≥ s·∫µn thay v√¨ ph√¢n t√≠ch l·∫°i
                description = slide.get("description", "")
                slide_placeholder_counts = self._parse_description_to_counts(description)

                # Check for EXACT match: same placeholder types and same counts
                required_set = set(required_placeholders)
                slide_set = set(slide_placeholder_counts.keys())

                if required_set == slide_set:
                    # Check if counts also match exactly
                    counts_match = True
                    for placeholder_type, required_count in required_counts.items():
                        slide_count = slide_placeholder_counts.get(placeholder_type, 0)
                        if slide_count != required_count:
                            counts_match = False
                            break

                    if counts_match:
                        logger.info(f"‚úÖ Found EXACT matching template (reuse allowed): {slide_id}")
                        logger.info(f"   Required: {required_counts}")
                        logger.info(f"   Template has: {slide_placeholder_counts}")
                        return slide
                    else:
                        logger.debug(f"‚ùå Template {slide_id}: placeholder types match but counts differ")
                        logger.debug(f"   Required: {required_counts}")
                        logger.debug(f"   Template has: {slide_placeholder_counts}")
                else:
                    logger.debug(f"‚ùå Template {slide_id}: placeholder types don't match")
                    logger.debug(f"   Required: {required_set}")
                    logger.debug(f"   Template has: {slide_set}")

            logger.info(f"‚ùå No EXACT matching template found for reuse: {required_counts}")
            return None

        except Exception as e:
            logger.error(f"Error finding exact matching template with reuse: {e}")
            return None



    def _create_placeholder_key(self, placeholder_type: str, index: int) -> str:
        """Create placeholder key for template lookup"""
        # For numbered placeholders like MainPointName_1, MainPointContent_1, ImageName_1, ImageContent_1
        if placeholder_type in ["MainPointName", "MainPointContent", "ImageName", "ImageContent"]:
            return f"{placeholder_type}_{index}"
        else:
            # For non-numbered placeholders like TitleName
            return placeholder_type

    async def _create_processed_slide_from_template(
        self,
        template_slide: Dict[str, Any],
        parsed_data: Dict[str, List[Dict[str, Any]]],
        slide_number: int,
        is_reused: bool = False,
        template_requirements: Dict[str, Any] = None
    ) -> Optional[Dict[str, Any]]:
        """
        T·∫°o processed slide t·ª´ template slide v·ªõi content mapping
        (T∆∞∆°ng t·ª± logic trong lu·ªìng c≈©, kh√¥ng fallback)

        Args:
            template_slide: Template slide ƒë·ªÉ copy
            parsed_data: Parsed content t·ª´ LLM
            content_index: Index tracking cho content usage
            slide_number: S·ªë th·ª© t·ª± slide

        Returns:
            Dict processed slide ho·∫∑c None n·∫øu fail
        """
        try:
            # Format m·ªõi: template_slide ch√≠nh l√† slide t·ª´ input JSON
            template_slide_id = template_slide.get("id")
            slide_data = template_slide.get("slideData", {})
            template_elements = slide_data.get("elements", [])

            # T·∫°o slideId m·ªõi cho processed slide
            if is_reused:
                new_slide_id = f"slide_{slide_number:03d}_reused_from_{template_slide_id}"
                logger.info(f"üìÑ Creating processed slide (REUSED): {new_slide_id} (from template: {template_slide_id})")
            else:
                new_slide_id = f"slide_{slide_number:03d}_from_{template_slide_id}"
                logger.info(f"üìÑ Creating processed slide (NEW): {new_slide_id} (from template: {template_slide_id})")

            # Copy to√†n b·ªô slide structure t·ª´ template (format m·ªõi)
            processed_slide = copy.deepcopy(template_slide)

            # Update slide ID v√† reset elements ƒë·ªÉ fill content m·ªõi
            processed_slide["id"] = new_slide_id
            processed_slide["slideData"]["id"] = new_slide_id
            processed_slide["slideData"]["title"] = f"Slide {slide_number}"
            processed_slide["slideData"]["elements"] = []  # Reset elements ƒë·ªÉ fill content m·ªõi

            # New placeholder patterns for the updated format - match both space and underscore formats
            placeholder_patterns = {
                "LessonName": r"LessonName[_\s]+(\d+)",
                "LessonDescription": r"LessonDescription[_\s]+(\d+)",
                "CreatedDate": r"CreatedDate[_\s]+(\d+)",
                "TitleName": r"TitleName[_\s]+(\d+)",
                "MainPointName": r"MainPointName[_\s]+(\d+)",
                "MainPointContent": r"MainPointContent[_\s]+(\d+)",
                "ImageName": r"ImageName[_\s]+(\d+)",
                "ImageContent": r"ImageContent[_\s]+(\d+)"
            }

            # Initialize template requirements if not provided
            if template_requirements is None:
                template_requirements = {}

            # Map content v√†o t·ª´ng element (format m·ªõi)
            for element in template_elements:
                if element.get("type") == "text":
                    text = element.get("text", "").strip()
                    element_id = element.get("id")

                    # Detect placeholder type t·ª´ text
                    logger.info(f"üîç Checking element text for placeholder: '{text}'")
                    placeholder_result = self._detect_placeholder_type_from_text(text, placeholder_patterns)
                    logger.info(f"üéØ Placeholder detection result: {placeholder_result}")

                    if placeholder_result:
                        placeholder_type, detected_max_length = placeholder_result

                        logger.info(f"üîç Mapping content for {placeholder_type}:")
                        logger.info(f"   Element ID: {element_id}")

                        try:
                            # Extract position info from element text for precise mapping
                            placeholder_key = self._extract_placeholder_key_from_text(text, placeholder_type)
                            template_max_length = None

                            # Try to find max_length from template requirements using exact key
                            if placeholder_key in template_requirements:
                                template_max_length = template_requirements[placeholder_key].get("max_length")
                            elif placeholder_type in template_requirements:
                                template_max_length = template_requirements[placeholder_type].get("max_length")

                            # Use template max_length if available, otherwise use detected max_length
                            final_max_length = template_max_length if template_max_length is not None else detected_max_length

                            # Get content with precise position mapping
                            content_item = self._get_content_by_position(
                                parsed_data, placeholder_type, placeholder_key
                            )

                            if not content_item:
                                logger.warning(f"‚ùå No content found for {placeholder_key}")
                                return None  # Skip slide if missing positioned content

                            raw_content = content_item.get("content", "")

                            logger.info(f"   Raw content for {placeholder_key}: {str(raw_content)[:100]}...")
                            logger.info(f"   Max length: {final_max_length} (template: {template_max_length}, detected: {detected_max_length})")

                            # X·ª≠ l√Ω content v·ªõi format m·ªõi - truy·ªÅn nguy√™n map cho LLM x·ª≠ l√Ω
                            # Truy·ªÅn nguy√™n map cho LLM ƒë·ªÉ l√†m ng·∫Øn t·ª´ng ph·∫ßn t·ª≠
                            processed_content_map = await self._handle_max_length_content_map(
                                raw_content,
                                final_max_length,
                                placeholder_type
                            )

                            # Copy element v√† update content v·ªõi map ƒë√£ ƒë∆∞·ª£c l√†m ng·∫Øn
                            processed_element = copy.deepcopy(element)
                            processed_element["text"] = processed_content_map  # Tr·ª±c ti·∫øp g√°n map

                            processed_slide["slideData"]["elements"].append(processed_element)

                            logger.info(f"‚úÖ Mapped {placeholder_key} to {element_id}: {str(processed_content_map)[:100]}...")
                            logger.info(f"   Final content type: {type(processed_content_map)}, items: {len(processed_content_map) if isinstance(processed_content_map, dict) else 'N/A'}")

                        except Exception as e:
                            logger.error(f"‚ùå Failed to handle content for {placeholder_type} in slide {slide_number}: {e}")
                            logger.error(f"   SKIPPING this slide due to content length issue - NO FALLBACK")
                            return None  # Skip entire slide if any content fails
                    else:
                        # Copy element kh√¥ng ph·∫£i placeholder (image, etc.)
                        processed_element = copy.deepcopy(element)
                        processed_slide["slideData"]["elements"].append(processed_element)

            logger.info(f"‚úÖ Successfully created processed slide {slide_number} with {len(processed_slide['slideData']['elements'])} elements")
            return processed_slide

        except Exception as e:
            logger.error(f"‚ùå Error creating processed slide from template: {e}")
            return None

    def _detect_placeholder_type_from_text(self, text: str, placeholder_patterns: Dict[str, str]) -> Optional[Tuple[str, int]]:
        """
        Detect placeholder type t·ª´ text element v√† extract max length

        Args:
            text: Text content c·ªßa element
            placeholder_patterns: Dict mapping placeholder types to regex patterns

        Returns:
            Tuple (placeholder_type, max_length) ho·∫∑c None n·∫øu kh√¥ng match
        """
        try:
            import re

            for placeholder_type, pattern in placeholder_patterns.items():
                match = re.search(pattern, text)
                if match:
                    # Extract max_length t·ª´ captured group
                    max_length = int(match.group(1)) if match.group(1) else 0
                    logger.info(f"üéØ Detected placeholder: {placeholder_type} with max_length: {max_length}")
                    return (placeholder_type, max_length)

            # Kh√¥ng t√¨m th·∫•y placeholder pattern
            return None

        except Exception as e:
            logger.error(f"‚ùå Error detecting placeholder type from text '{text}': {e}")
            return None

    def _extract_placeholder_key_from_text(self, text: str, placeholder_type: str) -> str:
        """
        Extract exact placeholder key from element text
        V√≠ d·ª•: "MainPointName 1 80" -> "MainPointName_1" ho·∫∑c "MainPointName_1" -> "MainPointName_1"
        """
        try:
            import re

            # Pattern ƒë·ªÉ extract numbers t·ª´ text - support both space and underscore formats
            # Format 1: "MainPointName 1 80" (space separated)
            pattern1 = rf'{placeholder_type}\s+(\d+)\s+\d+'
            match1 = re.search(pattern1, text)

            if match1:
                main_num = match1.group(1)
                return f"{placeholder_type}_{main_num}"

            # Format 2: "MainPointName_1" (underscore format)
            pattern2 = rf'{placeholder_type}_(\d+)'
            match2 = re.search(pattern2, text)

            if match2:
                main_num = match2.group(1)
                return f"{placeholder_type}_{main_num}"

            # Non-numbered: TitleName
            return placeholder_type

        except Exception as e:
            logger.error(f"‚ùå Error extracting placeholder key from text '{text}': {e}")
            return placeholder_type

    def _get_content_by_position(
        self,
        parsed_data: Dict[str, List[Dict[str, Any]]],
        placeholder_type: str,
        placeholder_key: str
    ) -> Optional[Dict[str, Any]]:
        """
        Get content by exact position based on placeholder key
        """
        try:
            content_list = parsed_data.get(placeholder_type, [])

            if not content_list:
                return None

            # For positioned placeholders, find by exact position_key match
            if placeholder_type in ["MainPointName", "MainPointContent", "ImageName", "ImageContent"]:
                for item in content_list:
                    if item.get("position_key") == placeholder_key:
                        logger.info(f"‚úÖ Found exact position match for {placeholder_key}")
                        return item

                # Fallback: try to find by position parsing
                logger.warning(f"‚ö†Ô∏è No exact position match for {placeholder_key}, using fallback")
                parts = placeholder_key.split('_')

                if placeholder_type in ["MainPointName", "MainPointContent"] and len(parts) >= 2:
                    target_main = int(parts[1])
                    for item in content_list:
                        if item.get("main_point") == target_main:
                            return item
                elif placeholder_type in ["ImageName", "ImageContent"] and len(parts) >= 2:
                    target_image = int(parts[1])
                    for item in content_list:
                        if item.get("image") == target_image:
                            return item
            else:
                # Non-numbered placeholders: TitleName, LessonName, etc.
                if len(content_list) > 0:
                    return content_list[0]

            return None

        except Exception as e:
            logger.error(f"‚ùå Error getting content by position for {placeholder_key}: {e}")
            return None

# Singleton instance
_json_template_service = None

def get_json_template_service() -> JsonTemplateService:
    """Get singleton instance c·ªßa JsonTemplateService"""
    global _json_template_service
    if _json_template_service is None:
        _json_template_service = JsonTemplateService()
    return _json_template_service
