"""
Slide Generation API Endpoints
API t·∫°o slide t·ª± ƒë·ªông t·ª´ LessonID v√† TemplateID
"""

import logging
from fastapi import APIRouter, HTTPException, BackgroundTasks
from typing import Dict, Any
from datetime import datetime
from googleapiclient.errors import HttpError

from app.models.slide_generation_models import (
    SlideGenerationRequest,
    SlideGenerationResponse,
    SlideGenerationTaskRequest,
    SlideGenerationTaskResponse,
    SlideGenerationError,
    SlideGenerationErrorCodes,
    SlideInfoRequest,
    SlideInfoResponse
)
from app.services.slide_generation_service import get_slide_generation_service
from app.services.mongodb_task_service import get_mongodb_task_service
from app.tasks.slide_generation_tasks import trigger_slide_generation_task, test_slide_generation_task
from app.services.google_slides_service import get_google_slides_service

logger = logging.getLogger(__name__)
router = APIRouter()


@router.post("/generate-slides", response_model=SlideGenerationResponse)
async def generate_slides_sync(request: SlideGenerationRequest):
    """
    T·∫°o slide t·ª± ƒë·ªông t·ª´ lesson_id v√† template_id (Synchronous)
    
    Endpoint n√†y nh·∫≠n lesson_id v√† template_id, sau ƒë√≥:
    1. L·∫•y n·ªôi dung b√†i h·ªçc t·ª´ Qdrant
    2. Ph√¢n t√≠ch c·∫•u tr√∫c template Google Slides
    3. S·ª≠ d·ª•ng LLM ƒë·ªÉ sinh n·ªôi dung slide ph√π h·ª£p
    4. T·∫°o Google Slides m·ªõi t·ª´ template v√† n·ªôi dung ƒë√£ sinh
    5. Tr·∫£ v·ªÅ link Google Slides ƒë·ªÉ xem/ch·ªânh s·ª≠a
    
    Args:
        request: SlideGenerationRequest v·ªõi lesson_id, template_id v√† config t√πy ch·ªçn
        
    Returns:
        SlideGenerationResponse: Th√¥ng tin slide ƒë√£ t·∫°o ho·∫∑c l·ªói n·∫øu th·∫•t b·∫°i
    """
    try:
        logger.info(f"=== GENERATE-SLIDES SYNC ENDPOINT CALLED ===")
        logger.info(f"Request: lesson_id={request.lesson_id}, template_id={request.template_id}")
        
        # L·∫•y slide generation service
        slide_service = get_slide_generation_service()
        
        if not slide_service.is_available():
            raise HTTPException(
                status_code=503,
                detail="Slide generation service not available"
            )
        
        # T·∫°o slides
        result = await slide_service.generate_slides_from_lesson(
            lesson_id=request.lesson_id,
            template_id=request.template_id,
            config_prompt=request.config_prompt,
            presentation_title=request.presentation_title
        )
        
        if result["success"]:
            logger.info(f"‚úÖ Slides generated successfully: {result['presentation_id']}")
            return SlideGenerationResponse(
                success=True,
                lesson_id=result["lesson_id"],
                template_id=result["original_template_id"],
                presentation_id=result["presentation_id"],
                presentation_title=result["presentation_title"],
                web_view_link=result["web_view_link"],
                slides_created=result["slides_created"],
                template_info=result["template_info"]
            )
        else:
            logger.error(f"‚ùå Slide generation failed: {result['error']}")
            
            # X√°c ƒë·ªãnh error code d·ª±a tr√™n error message
            error_code = SlideGenerationErrorCodes.UNKNOWN_ERROR
            if "lesson content" in result["error"].lower():
                error_code = SlideGenerationErrorCodes.LESSON_NOT_FOUND
            elif "template" in result["error"].lower():
                error_code = SlideGenerationErrorCodes.TEMPLATE_ANALYSIS_FAILED
            elif "llm" in result["error"].lower():
                error_code = SlideGenerationErrorCodes.LLM_GENERATION_FAILED
            elif "slides" in result["error"].lower():
                error_code = SlideGenerationErrorCodes.SLIDES_CREATION_FAILED
            
            raise HTTPException(
                status_code=400,
                detail={
                    "error_code": error_code,
                    "error_message": result["error"],
                    "success": False
                }
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Unexpected error in generate_slides_sync: {e}")
        raise HTTPException(
            status_code=500,
            detail={
                "error_code": SlideGenerationErrorCodes.UNKNOWN_ERROR,
                "error_message": str(e),
                "success": False
            }
        )


@router.post("/generate-slides-async", response_model=SlideGenerationTaskResponse)
async def generate_slides_async(request: SlideGenerationTaskRequest, background_tasks: BackgroundTasks):
    """
    T·∫°o slide t·ª± ƒë·ªông t·ª´ lesson_id v√† template_id (Asynchronous v·ªõi Celery)
    
    Endpoint n√†y t·∫°o Celery task ƒë·ªÉ x·ª≠ l√Ω slide generation b·∫•t ƒë·ªìng b·ªô:
    1. T·∫°o task trong MongoDB v·ªõi tr·∫°ng th√°i PENDING
    2. Kh·ªüi ch·∫°y Celery task x·ª≠ l√Ω slide generation
    3. Tr·∫£ v·ªÅ task_id ƒë·ªÉ client theo d√µi progress
    
    Args:
        request: SlideGenerationTaskRequest v·ªõi lesson_id, template_id v√† config
        background_tasks: FastAPI BackgroundTasks ƒë·ªÉ x·ª≠ l√Ω async
        
    Returns:
        SlideGenerationTaskResponse: task_id v√† tr·∫°ng th√°i ƒë·ªÉ theo d√µi
    """
    try:
        logger.info(f"=== GENERATE-SLIDES ASYNC ENDPOINT CALLED ===")
        logger.info(f"Request: lesson_id={request.lesson_id}, template_id={request.template_id}")
        
        # Trigger Celery task cho slide generation
        task_id = await trigger_slide_generation_task(
            lesson_id=request.lesson_id,
            template_id=request.template_id,
            config_prompt=request.config_prompt,
            presentation_title=request.presentation_title
        )

        logger.info(f"‚úÖ Slide generation task created: {task_id}")
        
        return SlideGenerationTaskResponse(
            task_id=task_id,
            status="PENDING",
            message="Task t·∫°o slide ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o. S·ª≠ d·ª•ng task_id ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh."
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error creating slide generation task: {e}")
        raise HTTPException(
            status_code=500,
            detail={
                "error_code": SlideGenerationErrorCodes.UNKNOWN_ERROR,
                "error_message": f"Failed to create task: {str(e)}",
                "success": False
            }
        )


@router.get("/template-info/{template_id}")
async def get_template_info(template_id: str):
    """
    L·∫•y th√¥ng tin c·∫•u tr√∫c c·ªßa Google Slides template (s·ª≠ d·ª•ng analyze_template_structure c≈©)

    Args:
        template_id: ID c·ªßa Google Slides template

    Returns:
        Dict ch·ª©a th√¥ng tin slides v√† elements c·ªßa template
    """
    try:
        logger.info(f"=== GET-TEMPLATE-INFO ENDPOINT CALLED ===")
        logger.info(f"Template ID: {template_id}")

        # L·∫•y slide generation service
        slide_service = get_slide_generation_service()

        if not slide_service.is_available():
            raise HTTPException(
                status_code=503,
                detail="Slide generation service not available"
            )

        # B∆∞·ªõc 1: Copy template ƒë·ªÉ ph√¢n t√≠ch (gi·ªëng workflow ch√≠nh)
        new_title = f"Template Analysis - {template_id}"
        copy_and_analyze_result = await slide_service.slides_service.copy_and_analyze_template(template_id, new_title)

        if not copy_and_analyze_result["success"]:
            logger.error(f"‚ùå Template copy failed: {copy_and_analyze_result['error']}")
            raise HTTPException(
                status_code=400,
                detail={
                    "error_code": SlideGenerationErrorCodes.TEMPLATE_ANALYSIS_FAILED,
                    "error_message": copy_and_analyze_result["error"],
                    "success": False
                }
            )

        # B∆∞·ªõc 2: Ph√¢n t√≠ch template v·ªõi placeholder detection (workflow m·ªõi)
        analyzed_template = slide_service._analyze_template_with_placeholders(copy_and_analyze_result)

        # B∆∞·ªõc 3: X√≥a temporary copy
        try:
            await slide_service.slides_service.delete_presentation(copy_and_analyze_result["copied_presentation_id"])
            logger.info(f"‚úÖ Temporary copy deleted: {copy_and_analyze_result['copied_presentation_id']}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not delete temporary copy: {e}")

        # T·∫°o response v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
        result = {
            "success": True,
            "template_id": template_id,
            "title": copy_and_analyze_result.get("presentation_title", "Unknown"),
            "slide_count": analyzed_template.get("total_slides", 0),
            "slides": analyzed_template.get("slides", []),
            "analysis_info": {
                "placeholder_detection": "enabled",
                "workflow": "new_2_phase_ai",
                "features": [
                    "Type detection",
                    "max_length calculation",
                    "font_size extraction",
                    "font_family extraction",
                    "font_style extraction",
                    "slide_description generation"
                ]
            }
        }

        logger.info(f"‚úÖ Template analyzed successfully with new workflow: {result.get('title', 'Unknown')}")
        logger.info(f"üìä Found {result['slide_count']} slides with placeholder detection")

        return result

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Unexpected error in get_template_info: {e}")
        raise HTTPException(
            status_code=500,
            detail={
                "error_code": SlideGenerationErrorCodes.UNKNOWN_ERROR,
                "error_message": str(e),
                "success": False
            }
        )


@router.post("/copy-and-analyze-template")
async def copy_and_analyze_template(request: dict):
    """
    Test endpoint: Copy template v√† ph√¢n t√≠ch c·∫•u tr√∫c (QUY TR√åNH M·ªöI)

    Args:
        request: {"template_id": "...", "new_title": "..."}

    Returns:
        Dict ch·ª©a th√¥ng tin file ƒë√£ copy v√† c·∫•u tr√∫c
    """
    try:
        logger.info(f"=== COPY-AND-ANALYZE-TEMPLATE ENDPOINT CALLED ===")

        template_id = request.get("template_id")
        new_title = request.get("new_title", f"Test Copy - {datetime.now().strftime('%Y%m%d_%H%M%S')}")

        if not template_id:
            raise HTTPException(
                status_code=400,
                detail="template_id is required"
            )

        logger.info(f"Template ID: {template_id}")
        logger.info(f"New Title: {new_title}")

        # L·∫•y slide generation service
        slide_service = get_slide_generation_service()

        if not slide_service.is_available():
            raise HTTPException(
                status_code=503,
                detail="Slide generation service not available"
            )

        # Copy v√† ph√¢n t√≠ch template
        result = await slide_service.slides_service.copy_and_analyze_template(template_id, new_title)

        if result["success"]:
            logger.info(f"‚úÖ Template copied and analyzed successfully: {result['copied_presentation_id']}")
            return result
        else:
            logger.error(f"‚ùå Copy and analyze failed: {result['error']}")
            raise HTTPException(
                status_code=400,
                detail={
                    "error_code": SlideGenerationErrorCodes.TEMPLATE_ANALYSIS_FAILED,
                    "error_message": result["error"],
                    "success": False
                }
            )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Unexpected error in copy_and_analyze_template: {e}")
        raise HTTPException(
            status_code=500,
            detail={
                "error_code": SlideGenerationErrorCodes.UNKNOWN_ERROR,
                "error_message": str(e),
                "success": False
            }
        )


@router.get("/health")
async def health_check():
    """
    Health check endpoint cho slide generation service
    
    Returns:
        Dict ch·ª©a tr·∫°ng th√°i c√°c service li√™n quan
    """
    try:
        slide_service = get_slide_generation_service()
        
        return {
            "status": "healthy" if slide_service.is_available() else "unhealthy",
            "services": {
                "slide_generation": slide_service.is_available(),
                "llm_service": slide_service.llm_service.is_available() if slide_service.llm_service else False,
                "google_slides": slide_service.slides_service.is_available() if slide_service.slides_service else False
            },
            "available_endpoints": [
                "/generate-slides",  # Sync slide generation
                "/generate-slides-async",  # Async slide generation
                "/template-info/{template_id}",  # Template analysis
                "/slide-info/{presentation_id}",  # Get full slide information by ID
                "/slide-info-by-url?url=...",  # Get full slide information by URL
                "/health"  # Health check
            ]
        }

    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "services": {
                "slide_generation": False,
                "llm_service": False,
                "google_slides": False
            }
        }


@router.get("/slide-info/{presentation_id}", response_model=SlideInfoResponse)
async def get_slide_info(presentation_id: str):
    """
    L·∫•y th√¥ng tin chi ti·∫øt c·ªßa Google Slides presentation

    Endpoint n√†y nh·∫≠n presentation_id (c√≥ th·ªÉ l√† ID ho·∫∑c URL ƒë·∫ßy ƒë·ªß) v√† tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt v·ªÅ presentation, bao g·ªìm:
    1. Th√¥ng tin c∆° b·∫£n (ti√™u ƒë·ªÅ, s·ªë l∆∞·ª£ng slides, etc.)
    2. Th√¥ng tin chi ti·∫øt v·ªÅ t·ª´ng slide (ID, layout, elements)
    3. Th√¥ng tin chi ti·∫øt v·ªÅ t·ª´ng element trong slide (ID, lo·∫°i, n·ªôi dung text, etc.)
    4. Th√¥ng tin style chi ti·∫øt c·ªßa t·ª´ng element (font, m√†u s·∫Øc, k√≠ch th∆∞·ªõc, etc.)
    5. Th√¥ng tin transform chi ti·∫øt c·ªßa t·ª´ng element (v·ªã tr√≠, scale, shear, etc.)
    6. Metadata t·ª´ Google Drive (th·ªùi gian t·∫°o, ch·ªânh s·ª≠a, etc.)

    Th√¥ng tin style bao g·ªìm:
    - Shape: font, m√†u ch·ªØ, k√≠ch th∆∞·ªõc ch·ªØ, m√†u n·ªÅn, ƒë∆∞·ªùng vi·ªÅn, etc.
    - Image: crop, brightness, contrast, transparency, etc.
    - Table: m√†u n·ªÅn cell, alignment, n·ªôi dung cell, etc.
    - Video: autoplay, start/end time, mute, etc.
    - Line: weight, dash style, m√†u s·∫Øc, arrow type, etc.

    Th√¥ng tin transform bao g·ªìm:
    - translateX, translateY: v·ªã tr√≠ c·ªßa element
    - scaleX, scaleY: t·ª∑ l·ªá scale c·ªßa element
    - shearX, shearY: ƒë·ªô nghi√™ng c·ªßa element
    - unit: ƒë∆°n v·ªã ƒëo l∆∞·ªùng (EMU, PT, etc.)

    Args:
        presentation_id: ID c·ªßa Google Slides presentation ho·∫∑c URL ƒë·∫ßy ƒë·ªß

    Returns:
        SlideInfoResponse: Th√¥ng tin chi ti·∫øt c·ªßa presentation
    """
    try:
        logger.info(f"=== GET-SLIDE-INFO ENDPOINT CALLED ===")
        logger.info(f"Request: presentation_id={presentation_id}")

        # S·ª≠ d·ª•ng presentation_id tr·ª±c ti·∫øp
        final_presentation_id = presentation_id

        # L·∫•y Google Slides service
        slides_service = get_google_slides_service()

        if not slides_service.is_available():
            raise HTTPException(
                status_code=503,
                detail="Google Slides service not available"
            )

        # X·ª≠ l√Ω presentation_id n·∫øu l√† URL
        if 'docs.google.com/presentation/d/' in final_presentation_id:
            try:
                parts = final_presentation_id.split('/d/')
                if len(parts) > 1:
                    final_presentation_id = parts[1].split('/')[0]
            except:
                pass

        # L·∫•y th√¥ng tin chi ti·∫øt
        result = await slides_service.get_presentation_details(final_presentation_id)

        if not result.get("success", False):
            error_message = result.get("error", "Unknown error")
            logger.error(f"‚ùå Error getting slide info: {error_message}")
            raise HTTPException(
                status_code=500,
                detail={
                    "error_code": SlideGenerationErrorCodes.UNKNOWN_ERROR,
                    "error_message": error_message,
                    "success": False
                }
            )

        logger.info(f"‚úÖ Successfully retrieved slide info for presentation: {final_presentation_id}")
        return result

    except HttpError as e:
        logger.error(f"‚ùå Google API error: {e}")
        status_code = e.resp.status
        error_code = SlideGenerationErrorCodes.UNKNOWN_ERROR

        if status_code == 404:
            error_code = SlideGenerationErrorCodes.TEMPLATE_NOT_ACCESSIBLE
        elif status_code == 403:
            error_code = SlideGenerationErrorCodes.PERMISSION_DENIED
        elif status_code == 429:
            error_code = SlideGenerationErrorCodes.QUOTA_EXCEEDED

        raise HTTPException(
            status_code=status_code,
            detail={
                "error_code": error_code,
                "error_message": str(e),
                "success": False
            }
        )

    except Exception as e:
        logger.error(f"‚ùå Error in get_slide_info: {e}")
        raise HTTPException(
            status_code=500,
            detail={
                "error_code": SlideGenerationErrorCodes.UNKNOWN_ERROR,
                "error_message": str(e),
                "success": False
            }
        )


@router.get("/slide-info-by-url", response_model=SlideInfoResponse)
async def get_slide_info_by_url(url: str):
    """
    L·∫•y th√¥ng tin chi ti·∫øt c·ªßa Google Slides presentation b·∫±ng URL

    Endpoint n√†y nh·∫≠n URL ƒë·∫ßy ƒë·ªß c·ªßa Google Slides v√† tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt v·ªÅ presentation, bao g·ªìm:
    1. Th√¥ng tin c∆° b·∫£n (ti√™u ƒë·ªÅ, s·ªë l∆∞·ª£ng slides, etc.)
    2. Th√¥ng tin chi ti·∫øt v·ªÅ t·ª´ng slide (ID, layout, elements)
    3. Th√¥ng tin chi ti·∫øt v·ªÅ t·ª´ng element trong slide (ID, lo·∫°i, n·ªôi dung text, etc.)
    4. Th√¥ng tin style chi ti·∫øt c·ªßa t·ª´ng element (font, m√†u s·∫Øc, k√≠ch th∆∞·ªõc, etc.)
    5. Th√¥ng tin transform chi ti·∫øt c·ªßa t·ª´ng element (v·ªã tr√≠, scale, shear, etc.)
    6. Metadata t·ª´ Google Drive (th·ªùi gian t·∫°o, ch·ªânh s·ª≠a, etc.)

    Th√¥ng tin style bao g·ªìm:
    - Shape: font, m√†u ch·ªØ, k√≠ch th∆∞·ªõc ch·ªØ, m√†u n·ªÅn, ƒë∆∞·ªùng vi·ªÅn, etc.
    - Image: crop, brightness, contrast, transparency, etc.
    - Table: m√†u n·ªÅn cell, alignment, n·ªôi dung cell, etc.
    - Video: autoplay, start/end time, mute, etc.
    - Line: weight, dash style, m√†u s·∫Øc, arrow type, etc.

    Th√¥ng tin transform bao g·ªìm:
    - translateX, translateY: v·ªã tr√≠ c·ªßa element
    - scaleX, scaleY: t·ª∑ l·ªá scale c·ªßa element
    - shearX, shearY: ƒë·ªô nghi√™ng c·ªßa element
    - unit: ƒë∆°n v·ªã ƒëo l∆∞·ªùng (EMU, PT, etc.)

    Args:
        url: URL ƒë·∫ßy ƒë·ªß c·ªßa Google Slides presentation

    Returns:
        SlideInfoResponse: Th√¥ng tin chi ti·∫øt c·ªßa presentation
    """
    try:
        logger.info(f"=== GET-SLIDE-INFO-BY-URL ENDPOINT CALLED ===")
        logger.info(f"Request: url={url}")

        # L·∫•y Google Slides service
        slides_service = get_google_slides_service()

        if not slides_service.is_available():
            raise HTTPException(
                status_code=503,
                detail="Google Slides service not available"
            )

        # X·ª≠ l√Ω URL ƒë·ªÉ l·∫•y presentation_id
        presentation_id = url
        if 'docs.google.com/presentation/d/' in url:
            try:
                parts = url.split('/d/')
                if len(parts) > 1:
                    presentation_id = parts[1].split('/')[0]
            except:
                pass

        # L·∫•y th√¥ng tin chi ti·∫øt
        result = await slides_service.get_presentation_details(presentation_id)

        if not result.get("success", False):
            error_message = result.get("error", "Unknown error")
            logger.error(f"‚ùå Error getting slide info: {error_message}")
            raise HTTPException(
                status_code=500,
                detail={
                    "error_code": SlideGenerationErrorCodes.UNKNOWN_ERROR,
                    "error_message": error_message,
                    "success": False
                }
            )

        logger.info(f"‚úÖ Successfully retrieved slide info for presentation: {presentation_id}")
        return result

    except HttpError as e:
        logger.error(f"‚ùå Google API error: {e}")
        status_code = e.resp.status
        error_code = SlideGenerationErrorCodes.UNKNOWN_ERROR

        if status_code == 404:
            error_code = SlideGenerationErrorCodes.TEMPLATE_NOT_ACCESSIBLE
        elif status_code == 403:
            error_code = SlideGenerationErrorCodes.PERMISSION_DENIED
        elif status_code == 429:
            error_code = SlideGenerationErrorCodes.QUOTA_EXCEEDED

        raise HTTPException(
            status_code=status_code,
            detail={
                "error_code": error_code,
                "error_message": str(e),
                "success": False
            }
        )

    except Exception as e:
        logger.error(f"‚ùå Error in get_slide_info_by_url: {e}")
        raise HTTPException(
            status_code=500,
            detail={
                "error_code": SlideGenerationErrorCodes.UNKNOWN_ERROR,
                "error_message": str(e),
                "success": False
            }
        )


@router.post("/test-celery")
async def test_celery():
    """
    Test endpoint ƒë·ªÉ ki·ªÉm tra Celery worker c√≥ ho·∫°t ƒë·ªông kh√¥ng
    """
    try:
        logger.info("üß™ Testing Celery worker...")

        # Trigger test task
        result = test_slide_generation_task.delay("Test from API endpoint")

        return {
            "success": True,
            "message": "Celery test task triggered",
            "task_id": result.id,
            "status": "Task sent to worker"
        }

    except Exception as e:
        logger.error(f"‚ùå Celery test failed: {e}")
        return {
            "success": False,
            "error": str(e),
            "message": "Celery worker may not be running"
        }
