#!/usr/bin/env python3
"""
Test script ƒë·ªÉ ki·ªÉm tra t·ªça ƒë·ªô ROI v·ªõi ·∫£nh th·∫≠t
"""

import cv2
import numpy as np
from pathlib import Path
import sys
import os

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import module
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.omr_debug_processor import OMRDebugProcessor


def test_with_real_image():
    """Test v·ªõi ·∫£nh th·∫≠t n·∫øu c√≥"""
    
    # T√¨m ·∫£nh test trong th∆∞ m·ª•c data/grading
    test_dirs = [
        "data/grading",
        "data/grading/test_images", 
        "data/grading/samples"
    ]
    
    image_extensions = [".jpg", ".jpeg", ".png", ".bmp"]
    test_image = None
    
    for test_dir in test_dirs:
        test_path = Path(test_dir)
        if test_path.exists():
            for ext in image_extensions:
                images = list(test_path.glob(f"*{ext}"))
                if images:
                    test_image = images[0]
                    break
            if test_image:
                break
    
    if not test_image:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh test, t·∫°o ·∫£nh gi·∫£...")
        # T·∫°o ·∫£nh test v·ªõi k√≠ch th∆∞·ªõc chu·∫©n
        test_dir = Path("data/grading/test_images")
        test_dir.mkdir(parents=True, exist_ok=True)
        
        # T·∫°o ·∫£nh tr·∫Øng v·ªõi k√≠ch th∆∞·ªõc A4 (t·ª∑ l·ªá 1:1.4)
        width, height = 1200, 1680
        test_img = np.ones((height, width, 3), dtype=np.uint8) * 255
        
        # V·∫Ω m·ªôt s·ªë h√¨nh vu√¥ng ƒëen ·ªü 4 g√≥c ƒë·ªÉ m√¥ ph·ªèng markers
        marker_size = 50
        # Top-left
        test_img[20:20+marker_size, 20:20+marker_size] = 0
        # Top-right  
        test_img[20:20+marker_size, width-20-marker_size:width-20] = 0
        # Bottom-left
        test_img[height-20-marker_size:height-20, 20:20+marker_size] = 0
        # Bottom-right
        test_img[height-20-marker_size:height-20, width-20-marker_size:width-20] = 0
        
        test_image = test_dir / "synthetic_answer_sheet.jpg"
        cv2.imwrite(str(test_image), test_img)
        print(f"‚úÖ ƒê√£ t·∫°o ·∫£nh test: {test_image}")
    
    print(f"üîç Testing v·ªõi ·∫£nh: {test_image}")
    
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(str(test_image))
    if image is None:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {test_image}")
        return
    
    print(f"üìê K√≠ch th∆∞·ªõc ·∫£nh g·ªëc: {image.shape}")
    
    # Kh·ªüi t·∫°o processor
    processor = OMRDebugProcessor()
    
    # Test tr√≠ch xu·∫•t regions
    print("\nüîç Testing extract_regions...")
    regions = processor.extract_regions(image)
    
    print(f"\nüìä K·∫øt qu·∫£ tr√≠ch xu·∫•t regions:")
    for region_name, region in regions.items():
        print(f"  ‚úÖ {region_name}: {region.shape}")
    
    # Test x·ª≠ l√Ω to√†n b·ªô
    print(f"\nüîç Testing full OMR processing...")
    result = processor.process_image(image)
    
    print(f"\nüìã K·∫øt qu·∫£ OMR:")
    print(f"  Student ID: {result['student_id']}")
    print(f"  Test Code: {result['test_code']}")
    print(f"  Total answers: {result['total_questions']}")
    print(f"  Status: {result['processing_status']}")
    
    # Hi·ªÉn th·ªã m·ªôt s·ªë c√¢u tr·∫£ l·ªùi
    if result['answers']:
        print(f"  Sample answers:")
        for i, (q_num, answer) in enumerate(list(result['answers'].items())[:10]):
            print(f"    Q{q_num}: {answer}")
        if len(result['answers']) > 10:
            print(f"    ... v√† {len(result['answers']) - 10} c√¢u kh√°c")
    
    print(f"\nüìÅ Debug images saved to: data/grading/debug/")
    debug_dir = Path("data/grading/debug")
    if debug_dir.exists():
        debug_files = list(debug_dir.glob("*.jpg"))
        print(f"  T·ªïng c·ªông {len(debug_files)} files debug")
        
        # Hi·ªÉn th·ªã file overview
        overview_file = debug_dir / "04b_roi_overview.jpg"
        if overview_file.exists():
            print(f"  üì∏ Xem file overview: {overview_file}")


def test_coordinate_scaling():
    """Test t·ª∑ l·ªá t·ªça ƒë·ªô v·ªõi c√°c k√≠ch th∆∞·ªõc ·∫£nh kh√°c nhau"""
    print(f"\nüîç Testing coordinate scaling...")
    
    processor = OMRDebugProcessor()
    
    # Test v·ªõi c√°c k√≠ch th∆∞·ªõc kh√°c nhau
    test_sizes = [
        (800, 1120),   # Nh·ªè
        (1000, 1400),  # Trung b√¨nh  
        (1200, 1680),  # L·ªõn
        (1500, 2100),  # R·∫•t l·ªõn
    ]
    
    for width, height in test_sizes:
        print(f"\nüìè Testing size: {width}x{height}")
        
        # T·∫°o ·∫£nh test
        test_image = np.ones((height, width, 3), dtype=np.uint8) * 255
        
        # Tr√≠ch xu·∫•t regions
        regions = processor.extract_regions(test_image)
        
        # T√≠nh t·ª∑ l·ªá so v·ªõi k√≠ch th∆∞·ªõc tham chi·∫øu
        max_weight, max_height = 1726, 2470
        scale_x = width / max_weight
        scale_y = height / max_height
        
        print(f"  Scale factors: x={scale_x:.3f}, y={scale_y:.3f}")
        
        # Ki·ªÉm tra m·ªôt s·ªë regions ch√≠nh
        key_regions = ["student_id", "test_code", "answers_01_15", "answers_16_30"]
        for region_name in key_regions:
            if region_name in regions:
                region = regions[region_name]
                print(f"    {region_name}: {region.shape[1]}x{region.shape[0]}")


if __name__ == "__main__":
    print("üöÄ Testing OMR coordinates with percentage-based layout...")
    
    # Test 1: V·ªõi ·∫£nh th·∫≠t ho·∫∑c ·∫£nh gi·∫£
    test_with_real_image()
    
    # Test 2: Ki·ªÉm tra t·ª∑ l·ªá t·ªça ƒë·ªô
    test_coordinate_scaling()
    
    print("\n‚úÖ All coordinate tests completed!")
    print("üìÅ Check debug images in data/grading/debug/ folder")
