name: Deploy PlanBook AI to VPS

on:
  push:
    branches:
      - master
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            echo "üìÅ Moving to project folder"
            cd /***/be/PlanBook_AI || exit 1

            echo "üîÑ Resetting and pulling latest code"
            git reset --hard
            git pull origin master || git pull origin main

            echo "üõë Stopping all services gracefully..."
            docker compose -f docker-compose.yml down --remove-orphans

            echo "üèóÔ∏è Building Docker images..."
            if ! docker compose -f docker-compose.yml build --no-cache; then
              echo "‚ùå Build failed. Attempting to restart previous version..."
              docker compose -f docker-compose.yml up -d
              exit 1
            fi

            echo "üßπ Cleaning up unused images and containers..."
            docker system prune -f

            echo "üöÄ Starting all services..."
            docker compose -f docker-compose.yml up -d

            echo "‚è≥ Waiting for services to initialize..."
            sleep 60

            echo "ü©∫ Performing health checks..."
            
            # Check FastAPI main service
            if curl -fs http://localhost:8000/health; then
              echo "‚úÖ FastAPI service is healthy!"
            else
              echo "‚ùå FastAPI health check failed"
              docker logs planbook-ai --tail 50
              exit 1
            fi

            # Check Celery Flower monitoring
            if curl -fs http://localhost:5555; then
              echo "‚úÖ Celery Flower is accessible!"
            else
              echo "‚ö†Ô∏è Celery Flower check failed (non-critical)"
            fi

            # Check MongoDB connection
            if docker exec planbook-mongodb mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
              echo "‚úÖ MongoDB is healthy!"
            else
              echo "‚ùå MongoDB health check failed"
              docker logs planbook-mongodb --tail 50
              exit 1
            fi

            # Check Redis connection
            if docker exec planbook-redis redis-cli ping | grep -q PONG; then
              echo "‚úÖ Redis is healthy!"
            else
              echo "‚ùå Redis health check failed"
              docker logs planbook-redis --tail 50
              exit 1
            fi

            # Check Qdrant vector database
            if curl -fs http://localhost:6333/health; then
              echo "‚úÖ Qdrant is healthy!"
            else
              echo "‚ùå Qdrant health check failed"
              docker logs planbook-qdrant --tail 50
              exit 1
            fi

            # Check Kafka
            if docker exec planbook-kafka kafka-topics --bootstrap-server localhost:9092 --list > /dev/null 2>&1; then
              echo "‚úÖ Kafka is healthy!"
            else
              echo "‚ö†Ô∏è Kafka check failed (may need more time to start)"
            fi

            echo "üìä Service status summary:"
            docker compose -f docker-compose.yml ps

            echo "üéâ Deployment completed successfully!"
            echo "üìç Services available at:"
            echo "   - FastAPI: http://localhost:8000"
            echo "   - API Docs: http://localhost:8000/docs"
            echo "   - Celery Flower: http://localhost:5555"
            echo "   - Dozzle Logs: http://localhost:8080"
            echo "   - MongoDB: localhost:27017"
            echo "   - Redis: localhost:6379"
            echo "   - Qdrant: http://localhost:6333"
            echo "   - Kafka: localhost:9092"

            # Final cleanup
            docker image prune -f
